<?php

/**
 * Implemetnación del hoock help
 */
function ranking_help( $path, $arg ) {
	$output = '';

	switch( $path ){
		case 'admin/help#ranking':
			$output = '<p>'.t("Permite manejar y controlar el ránking de las modalidades.").'</p>';
			break;
	}
	return $output;
}
/**
* Implementation of hook_perm()
* Outlines permissions for this module.
* @return array - An array of valid permissions for the match module
*/
function ranking_perm(){
  return array('administer point table', 'view ranking');
}//end function match_perm()
/**
 * Implementation of hook_menu()
 * Admin menu link for the module
 * @return unknown_type
 */

function ranking_menu(){
  $items[ 'admin/base_datos_externa/ranking' ] = array (
    'title' => 'Ranking',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_admin' ),
	'access arguments' => array( 'administer point table' ),	
	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/desafios' ] = array (
    'title' => 'Desafios',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_desafios' ),
	'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_desafios.inc',
	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/torneos' ] = array (
    'title' => 'Torneos',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_torneos' ),
	'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_torneos.inc',
	'type' => MENU_LOCAL_TASK,
  );
	
    //MENÚ para mostrar el ranking
    $items[ 'puntuacion/%' ] = array (
        'title' => t( 'Puntuacion' ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'mostrar_puntuacion' ),
        'access arguments' => array( 'view ranking' ),
        'file' => 'inc/ranking_modalidades.inc',
        'type' => MENU_CALLBACK,
    );

  return $items;
}
/**
 * Función para desplegar la forma de bienvenida para el módulo ránking
 * no estoy seguro de que se despliegue, pero si se despliega sólo
 * debe mostrar una leyenda indicando la forma de proceder con la
 * configuración de cada tipo de ránking.
 */
function ranking_admin() {
    $form['leyenda'] = array (
        '#value' => '<p>Bienvenido a la seccion de administracion de ranking.</p>.<p>Para configurar dirígete a:</p>'
    );
    $form['desafios'] = array (
        '#value' => l(t('Configuracion para desafios'), 'admin/base_datos_externa/ranking/desafios'),
    );
    $form['torneos'] = array (
        '#value' => l(t('Configuracion para torneos'), 'admin/base_datos_externa/ranking/torneos'),
    );
}
/**
 * Implementación del hoock theme
 */
function ranking_theme() {
    return array (
        'ranking_desafios' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_desafios.inc',
        ),
        'ranking_torneos' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_torneos.inc',
        ),
        'ranking_puntuacion' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_puntuacion.inc',
        ),
    );
}

/**
 *	Función para mostrar la puntuación de una modalidad
 */
function calcula_ranking_desafio ($Desafio) 
	{
		
		$nid_Equipo_Local = $Desafio->nid_Equipo_Local;
		$nid_Equipo_Visitante = $Desafio->nid_Equipo_Visitante;
		
		$ganador = $Desafio->ganador;
		
		$diferenciaPuntuacion = $Desafio->Puntuacion_Equipo_Local - $Desafio->Puntuacion_Equipo_Visitante;
		
		if( $diferenciaPuntuacion < 0 )
			$diferenciaPuntuacion *= -1;

		if( $ganador == $Desafio->nid_Equipo_Local )
		{
			
			if ( $diferenciaPuntuacion == 0 )
			{		
					$puntuacion_ganador +=100;
					$puntuacio_perdedor -=100;
			}
			else if ( $diferenciaPuntuacion < 99 )
			{
					$puntuacion_ganador += 90;
					$perdedor_puntuacion -= 90;

			}
			else if ( $diferenciaPuntuacion < 199 )
			{
					$puntuacion_ganador += 80;
					$perdedor_puntuacion -= 80;

			}		
			else if ( $diferenciaPuntuacion < 399 )
			{
					$puntuacion_ganador += 70;
					$perdedor_puntuacion -= 70;

			}		
			else if ( $diferenciaPuntuacion < 599 )
			{
					$puntuacion_ganador += 60;
					$perdedor_puntuacion -= 60;

			}		
			else if ( $diferenciaPuntuacion < 899 )
			{
					$puntuacion_ganador += 50;
					$perdedor_puntuacion -= 50;

			}
			
			else if ( $diferenciaPuntuacion < 1199 )
			{
					$puntuacion_ganador += 40;
					$perdedor_puntuacion -= 40;

			}		
			else if ( $diferenciaPuntuacion < 1599 )
			{
					$puntuacion_ganador += 30;
					$perdedor_puntuacion -= 30;

			}		
			else if ( $diferenciaPuntuacion < 1999 )
			{
					$puntuacion_ganador += 20;
					$perdedor_puntuacion -= 20;

			}
			else if ( $diferenciaPuntuacion < 2499 )
			{
					$puntuacion_ganador += 10;
					$perdedor_puntuacion -= 10;

			}
			
			else if ( $diferenciaPuntuacion >= 2500 )
			{
				
				$puntuacion_ganador += 1;
				$perdedor_puntuacion -= 1;
				
			}
			
			actualizar_ranking( $nid_Equipo_Local, $puntuacion_ganador, 1, 1 );
			actualizar_ranking( $nid_Equipo_Visitante, $puntuacion_perdedor,1 );

		}
		
		else
		{
			
			if ( $diferenciaPuntuacion == 0 )
			{		
					$puntuacion_ganador -=100;
					$perdedor_puntuacion +=100;
			}
			else if ( $diferenciaPuntuacion < 99 )
			{
					$puntuacion_ganador += 90;
					$perdedor_puntuacion += 90;

			}
			else if ( $diferenciaPuntuacion < 199 )
			{
					$puntuacion_ganador -= 80;
					$perdedor_puntuacion += 80;

			}		
			else if ( $diferenciaPuntuacion < 399 )
			{
					$puntuacion_ganador -= 70;
					$perdedor_puntuacion += 70;

			}		
			else if ( $diferenciaPuntuacion < 599 )
			{
					$puntuacion_ganador -= 60;
					$perdedor_puntuacion += 60;

			}		
			else if ( $diferenciaPuntuacion < 899 )
			{
					$puntuacion_ganador -= 50;
					$perdedor_puntuacion += 50;

			}
			
			else if ( $diferenciaPuntuacion < 1199 )
			{
					$puntuacion_ganador -= 40;
					$perdedor_puntuacion += 40;

			}		
			else if ( $diferenciaPuntuacion < 1599 )
			{
					$puntuacion_ganador -= 30;
					$perdedor_puntuacion += 30;

			}		
			else if ( $diferenciaPuntuacion < 1999 )
			{
					$puntuacion_ganador -= 20;
					$perdedor_puntuacion += 20;

			}
			else if ( $diferenciaPuntuacion < 2499 )
			{
					$puntuacion_ganador -= 10;
					$perdedor_puntuacion += 10;

			}
			
			else if ( $diferenciaPuntuacion >= 2500 )
			{
				
				$puntuacion_ganador -= 1;
				$perdedor_puntuacion += 1;
				
			}
	
	
			actualizar_ranking( $nid_Equipo_Visitante, $puntuacion_ganador,1, 1 );
			actualizar_ranking( $nid_Equipo_Local, $puntuacion_perdedor, 1 );
			
		}
		
		
		
		
	}
	
	
	
	
	/**
	 *	Función para calcular el ranking luego de un desafío
	 *	@Param 
	 *	$equipos -- Arreglo con los equipos integrantes del torneo
	 *		que contiene:
	 *	equipos[ $Lugar ] = nid_Equipo donde:
	 *	$Lugar es la posición que ocupa el equipo dentro del torneo
	 *	$nid_Equipo es el nid del Equipo
	 */
	function calcula_ranking_torneo( $equipos )
	{
		
		
		$numero_Equipos = sizeof( $equipos );
		
		if( $numero_Equipos < 64 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 1600, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
				

			}
			
		}

		else if( $numero_Equipos < 128 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 1900, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );

			}
			
		}


		else if( $numero_Equipos < 256 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2200, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
	

			}
			
		}

		else if( $numero_Equipos < 512 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2500, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 2000, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 600, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
	
				else if ( i < 512 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
	

			}
			
		}
		
		else if( $numero_Equipos < 1024 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2800, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 2300, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 2000, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 600, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
	
				else if ( i < 512 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
	
				else if ( i < 1024 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
					
			}
			
		}		
		return $form;
	}	
/**
 * Función para actualizar el ranking de un equipo
 * Recibe el nind_Equipo, Puntación a sumar, Win (1) /Loss (0)
 * La variable torneo indica si la actualización es por torneo y el valor es 0 por defecto (No es torneo)
 * La variable win indica si ganó o perdió el desafío y el valor por defecto es 0 (Perdió el desafío)
 */
function actualizar_ranking($nid_Equipo, $puntos, $torneo = 0, $win = 0) {
    db_set_active('eSM');
        $puntuacion = db_fetch_object(db_query('SELECT * FROM {Puntuacion} WHERE nid_Equipo = %d', $nid_Equipo));
    db_set_active('default');
    
    $puntuacion->Puntuacion = $puntuacion->Puntuacion + $puntos;    //Actualiza los puntos del equipo
    
    if ($torneo == 0) {         //El partido es un desafío, hace la actualización de puntos y partidos jugados
        ++$puntuacion->PJ;      //Suma otro partido a los partidos jugados por el equipo
        
        if($puntuacion->Puntuacion < 0)     //Asegura que la puntuación nunca vaya a bajar de cero.
            $puntuacion->Puntuacion = 0;
        
        if ($win == 0) {        //El equipo perdió el partido
            if ($puntuacion >= 0) {
                watchdog('ranking', 'Ha ocurrido un error al calcular los puntos del partido : '. $nid_Equipo, NULL, WATCHDOG_ERROR);
                return;
            }
            
            if($puntuacion->Racha > 0)
                $puntuacion->Racha == 0;        //Resetea la racha a cero
        }
        else {
            if ($puntuacion <= 0) {
                watchdog('ranking', 'Ha ocurrido un error al calcular los puntos del partido : '. $nid_Equipo, NULL, WATCHDOG_ERROR);
                return;
            }
            
            ++$puntuacion->PG;      //Incrementa el número de partidos ganados
            ++$puntuacion->Racha;   //Incrementa la racha del jugador
        }
    }
    else {
        if ($puntos < 0 ) {
            watchdog('ranking', 'Ha ocurrido un error al calcular los puntos del partido : '. $nid_Equipo, NULL, WATCHDOG_ERROR);
            return;
        }
        ++$puntuacion->TJ;
        if ($win == 1)
            ++$puntuacion->TG;
    }
    
    db_set_active('eSM');
        db_query('UPDATE {Puntuacion} SET Puntuacion = %d, PJ = %d, PG = %d, Racha = %d, TJ = %d, TG = %d WHERE nid_Equipo = %d', $puntuacion->Puntuacion, $puntuacion->PJ, $puntuacion->PG, $puntuacion->Racha, $puntuacion->TJ, $puntuacion->TG, $nid_Equipo);
    db_set_active('default');
    
    return;
}
