<?php

/**
 * Implemetnación del hoock help
 */
function ranking_help() {
	$output = '';
	switch($path){
		case 'admin/help#ranking':
			$output = '<p>'.t("Permite manejar y controlar el ránking de las modalidades.").'</p>';
			break;
	}
	return $output;
}
/**
* Implementation of hook_perm()
* Outlines permissions for this module.
* @return array - An array of valid permissions for the match module
*/
function ranking_perm(){
  return array('administer point table', 'view ranking');
}//end function match_perm()
/**
 * Implementation of hook_menu()
 * Admin menu link for the module
 * @return unknown_type
 */

function ranking_menu(){
  $items[ 'admin/base_datos_externa/ranking' ] = array (
    'title' => 'Ranking',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_admin' ),
	'access arguments' => array( 'administer point table' ),	
	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/desafios' ] = array (
    'title' => 'Desafios',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_desafios' ),
	'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_desafios.inc',
	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/torneos' ] = array (
    'title' => 'Torneos',
    'page callback' => 'drupal_get_form',
	'page arguments' => array( 'ranking_torneos' ),
	'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_torneos.inc',
	'type' => MENU_LOCAL_TASK,
  );
	
	
	//MENÚ para mostrar el ranking
	$items[ 'puntuacion/%' ] = array (
		'title' => t( 'Puntuacion' ),
    'page callback' => 'drupal_get_form',
		'page arguments' => array( 'mostrar_puntuacion' ),
		'access arguments' => array( 'view ranking' ),
    'file' => 'inc/ranking_modalidades.inc',
		'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Función para desplegar la forma de bienvenida para el módulo ránking
 * no estoy seguro de que se despliegue, pero si se despliega sólo
 * debe mostrar una leyenda indicando la forma de proceder con la
 * configuración de cada tipo de ránking.
 */
function ranking_admin() {
    $form['leyenda'] = array (
        '#value' => '<p>Bienvenido a la seccion de administracion de ranking.</p>.<p>Para configurar dirígete a:</p>'
    );
    $form['desafios'] = array (
        '#value' => l(t('Configuracion para desafios'), 'admin/base_datos_externa/ranking/desafios'),
    );
    $form['torneos'] = array (
        '#value' => l(t('Configuracion para torneos'), 'admin/base_datos_externa/ranking/torneos'),
    );
}
/**
 * Implementación del hoock theme
 */
function ranking_theme() {
    return array (
        'ranking_desafios' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_desafios.inc',
        ),
        'ranking_torneos' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_torneo.inc',
        ),
    );
}
<<<<<<< HEAD


	/**
	 *	Función para calcular el ranking luego de un desafío
	 *	@Param $Desafio Es un objeto con:
	 *	$nid_EquipoLocal -- El nid del equipo local
	 *	$nid_EquipoVisitante -- El nid del equipo visitante
	 *	$Puntuacion_Local -- La puntuación del equipo local al inicio del desafío
	 *	$Puntuacion_Visitante -- La puntuación del equipo visitante al inicio del desafío
	 *	$ganador -- El nid del equipo ganador
	 *	
	 */
	function calcula_ranking_desafio( $Desafio )
=======
/**
 *	Función para mostrar la puntuación de una modalidad
 */
function mostrar_puntuacion(  )
{
	
	dsm( "Hola" );
	
	$id_Modalidad_Juego_Temporada = arg( 2 );
	
	
	$form[ 'puntuacion' ] = array
	(
		'#title' => t( 'Puntuacion.' ),
		'#type' => 'fieldset',
		//'#default_value' => $Equipos->Nombre,
		//'#options' => $options,
		'#collapsible' => 0,
	);
	
	db_set_active( 'eSM' );
	
		$Puntuacion_result = db_query( "SELECT { * } FROM { Puntuacion } AS { p } INNER JOIN { Equipo } AS { e } ON { p.nid_Equipo } = { e.nid_Equipo } INNER JOIN { Modalidad_Juego_Temporada } AS { m } ON { e.id_Modalidad_Juego_Temporada } = { m.id_Modalidad_Juego_Temporada } WHERE { p.nid_Equipo } = %d ", arg( 2 ) );
		
	db_set_active( 'default' );	
	
	//Primero mostraremos todos los equipos
	while( $Puntuacion = db_fetch_object( $Puntuacion_result ) )
>>>>>>> 86bcdc92461e9f620e0097d9238671413bbffb6e
	{
		
		$nid_EquipoLocal = $Desafio->nid_EquipoLocal;
		$nid_EquipoVisitante = $Desafio->nid_EquipoVisitante;
		
		$ganador = $Desafio->ganador;
		
		$diferenciaPuntuacion = $Desafio->Puntuacion_Local - $Desafio->Puntuacion_Visitante;
		
		if( $diferenciaPuntuacion < 0 )
			$diferenciaPuntuacion *= -1;

		if( $ganador == $Desafio->nid_EquipoLocal )
		{
			
			if ( $diferenciaPuntuacion == 0 )
			{		
					$puntuacion_ganador +=100;
					$puntuacio_perdedor -=100;
			}
			else if ( $diferenciaPuntuacion < 99 )
			{
					$puntuacion_ganador += 90;
					$perdedor_puntuacion -= 90;

			}
			else if ( $diferenciaPuntuacion < 199 )
			{
					$puntuacion_ganador += 80;
					$perdedor_puntuacion -= 80;

			}		
			else if ( $diferenciaPuntuacion < 399 )
			{
					$puntuacion_ganador += 70;
					$perdedor_puntuacion -= 70;

			}		
			else if ( $diferenciaPuntuacion < 599 )
			{
					$puntuacion_ganador += 60;
					$perdedor_puntuacion -= 60;

			}		
			else if ( $diferenciaPuntuacion < 899 )
			{
					$puntuacion_ganador += 50;
					$perdedor_puntuacion -= 50;

			}
			
			else if ( $diferenciaPuntuacion < 1199 )
			{
					$puntuacion_ganador += 40;
					$perdedor_puntuacion -= 40;

			}		
			else if ( $diferenciaPuntuacion < 1599 )
			{
					$puntuacion_ganador += 30;
					$perdedor_puntuacion -= 30;

			}		
			else if ( $diferenciaPuntuacion < 1999 )
			{
					$puntuacion_ganador += 20;
					$perdedor_puntuacion -= 20;

			}
			else if ( $diferenciaPuntuacion < 2499 )
			{
					$puntuacion_ganador += 10;
					$perdedor_puntuacion -= 10;

			}
			
			else if ( $diferenciaPuntuacion >= 2500 )
			{
				
				$puntuacion_ganador += 1;
				$perdedor_puntuacion -= 1;
				
			}
			
			actualizar_ranking( $nid_EquipoLocal, $puntuacion_ganador, 1, 1 );
			actualizar_ranking( $nid_EquipoVisitante, $puntuacion_perdedor,1 );

		}
		
		else
		{
			
			if ( $diferenciaPuntuacion == 0 )
			{		
					$puntuacion_ganador -=100;
					$perdedor_puntuacion +=100;
			}
			else if ( $diferenciaPuntuacion < 99 )
			{
					$puntuacion_ganador += 90;
					$perdedor_puntuacion += 90;

			}
			else if ( $diferenciaPuntuacion < 199 )
			{
					$puntuacion_ganador -= 80;
					$perdedor_puntuacion += 80;

			}		
			else if ( $diferenciaPuntuacion < 399 )
			{
					$puntuacion_ganador -= 70;
					$perdedor_puntuacion += 70;

			}		
			else if ( $diferenciaPuntuacion < 599 )
			{
					$puntuacion_ganador -= 60;
					$perdedor_puntuacion += 60;

			}		
			else if ( $diferenciaPuntuacion < 899 )
			{
					$puntuacion_ganador -= 50;
					$perdedor_puntuacion += 50;

			}
			
			else if ( $diferenciaPuntuacion < 1199 )
			{
					$puntuacion_ganador -= 40;
					$perdedor_puntuacion += 40;

			}		
			else if ( $diferenciaPuntuacion < 1599 )
			{
					$puntuacion_ganador -= 30;
					$perdedor_puntuacion += 30;

			}		
			else if ( $diferenciaPuntuacion < 1999 )
			{
					$puntuacion_ganador -= 20;
					$perdedor_puntuacion += 20;

			}
			else if ( $diferenciaPuntuacion < 2499 )
			{
					$puntuacion_ganador -= 10;
					$perdedor_puntuacion += 10;

			}
			
			else if ( $diferenciaPuntuacion >= 2500 )
			{
				
				$puntuacion_ganador -= 1;
				$perdedor_puntuacion += 1;
				
			}
	
	
			actualizar_ranking( $nid_EquipoVisitante, $puntuacion_ganador,1, 1 );
			actualizar_ranking( $nid_EquipoLocal, $puntuacion_perdedor, 1 );
			
		}
		
		
		
		
	}
	
	
	
	
	/**
	 *	Función para calcular el ranking luego de un desafío
	 *	@Param 
	 *	$equipos -- Arreglo con los equipos integrantes del torneo
	 *		que contiene:
	 *	equipos[ $Lugar ] = nid_Equipo donde:
	 *	$Lugar es la posición que ocupa el equipo dentro del torneo
	 *	$nid_Equipo es el nid del Equipo
	 */
	function calcula_ranking_torneo( $equipos )
	{
		
		
		$numero_Equipos = sizeof( $equipos );
		
		if( $numero_Equipos < 64 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 1600, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
				

			}
			
		}

		else if( $numero_Equipos < 128 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 1900, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );

			}
			
		}


		else if( $numero_Equipos < 256 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2200, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1100, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
	

			}
			
		}

		else if( $numero_Equipos < 512 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2500, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 2000, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1400, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 600, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
	
				else if ( i < 512 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
	

			}
			
		}
		
		else if( $numero_Equipos < 1024 )
		{
			for( $i = 1; $i < $numero_Equipos; $i++ )
			{
					
				if ( i == 1 )
					actualizar_ranking( $equipos[ i ], 2800, 0, 1 );
					
				else if ( i < 2 )
					actualizar_ranking( $equipos[ i ], 2300, 0, 0 );

				else if ( i < 4 )
					actualizar_ranking( $equipos[ i ], 2000, 0, 0 );

				else if ( i < 8 )
					actualizar_ranking( $equipos[ i ], 1700, 0, 0 );

				else if ( i < 16 )
					actualizar_ranking( $equipos[ i ], 700, 0, 0 );
				
				else if ( i < 32 )
					actualizar_ranking( $equipos[ i ], 600, 0, 0 );
				
				else if ( i < 64 )
					actualizar_ranking( $equipos[ i ], 500, 0, 0 );

				else if ( i < 128 )
					actualizar_ranking( $equipos[ i ], 400, 0, 0 );
				
				else if ( i < 256 )
					actualizar_ranking( $equipos[ i ], 300, 0, 0 );
	
				else if ( i < 512 )
					actualizar_ranking( $equipos[ i ], 200, 0, 0 );
	
				else if ( i < 1024 )
					actualizar_ranking( $equipos[ i ], 100, 0, 0 );
					
			}
			
		}		
		
	}
