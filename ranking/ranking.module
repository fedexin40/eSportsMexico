<?php

/**
 * Implemetnación del hoock help
 */
function ranking_help($path, $arg) {

	$output = '';

	switch( $path ){
		case 'admin/help#ranking':
			$output = '<p>'.t("Permite manejar y controlar el ránking de las modalidades.").'</p>';
			break;
	}
	return $output;
}
/**
* Implementation of hook_perm()
* Outlines permissions for this module.
* @return array - An array of valid permissions for the match module
*/
function ranking_perm(){
  return array('administer point table', 'view ranking');
}//end function match_perm()
/**
 * Implementation of hook_menu()
 * Admin menu link for the module
 * @return unknown_type
 */

function ranking_menu(){
  $items[ 'admin/base_datos_externa/ranking' ] = array (
    'title' => 'Ranking',
    'description' => t('Permite configurar las divisiones, asi como los puntos que ganan los equipos en cada evento.'),
    'page callback' => 'ranking_admin',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -8,
    'access arguments' => array( 'administer point table' ),	
  );
  $items[ 'admin/base_datos_externa/ranking/desafios' ] = array (
    'title' => 'Desafios',
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'ranking_desafios' ),
    'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_desafios.inc',
  	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/torneos' ] = array (
    'title' => 'Torneos',
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'ranking_torneos' ),
    'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_torneos.inc',
  	'type' => MENU_LOCAL_TASK,
  );
  $items[ 'admin/base_datos_externa/ranking/divisiones' ] = array (
    'title' => 'Divisiones',
    'page callback' => 'drupal_get_form',
    'page arguments' => array( 'ranking_divisiones' ),
    'access arguments' => array( 'administer point table' ),
    'file' => 'inc/ranking_divisiones.inc',
  	'type' => MENU_LOCAL_TASK,
  );
	
  //MENÚ para mostrar el ranking
  $items[ 'taxonomy/term/%/ranking' ] = array (
      'title' => t( 'Ladderboard' ),
      'page callback' => 'drupal_get_form',
      'page arguments' => array( 'mostrar_puntuacion' ),
      'access arguments' => array( 'view ranking' ),
      'file' => 'inc/ranking_modalidades.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
  );

  return $items;
}
/**
 * Implementación del hook_block
 */
function ranking_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Ranking.');
      return $block;
    
    case 'view':
      switch ($delta) {
        case 0:
          $block['subject'] = t('Ranking');
          $block['content'] = _ranking_get_block();
          return $block;
      }
  }
}
/**
 * Función para desplegar la forma de bienvenida para el módulo ránking
 * no estoy seguro de que se despliegue, pero si se despliega sólo
 * debe mostrar una leyenda indicando la forma de proceder con la
 * configuración de cada tipo de ránking.
 */
function ranking_admin() {
    $output = '<div><p>Bienvenido a la seccion de administracion de ranking</p><p>Para configurar dirijete a:</p></div>';
    
    $content[] = l(t('Configuracion para desafios'), 'admin/base_datos_externa/ranking/desafios');
    $content[] = l(t('Configuracion para divisiones'), 'admin/base_datos_externa/ranking/divisiones');
    $content[] = l(t('Configuracion para torneos'), 'admin/base_datos_externa/ranking/torneos');
    
    $output .= theme('menu_tree', theme('item_list', $content));
    return $output;
}
/**
 * Implementación del hoock theme
 */
function ranking_theme() {
    return array (
        'ranking_desafios' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_desafios.inc',
        ),
        'ranking_torneos' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_torneos.inc',
        ),
        'ranking_puntuacion' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_puntuacion.inc',
        ),
        'ranking_divisiones' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/ranking_divisiones.inc',
        ),
    );
}

/**
 * Implementation of hook_rules_event_info().
 * Usado para notificar a los capitanes que su ránking ha sido actualizado
 * @ingroup rules
 */
function ranking_rules_event_info() {
  return array(
    'ranking_actualizado_desafio' => array(
      'label' => t('Puntuacion del equipo actualizada por un desafio'),
      'module' => 'Ranking',
      'arguments' => array(
        'equipo' => array('type' => 'node', 'label' => t('Equipo al que pertenece el usuario')),
        'user' => array('type' => 'user', 'label' => t('Capitan del equipo.')),
		'match' => array('type' => 'node', 'label' => t('Detalles del desafio.')),
      ),
    ),
    'ranking_actualizado_torneo' => array(
      'label' => t('Puntuacion del equipo actualizada por un torneo'),
      'module' => 'Ranking',
      'arguments' => array(
        'equipo' => array('type' => 'node', 'label' => t('Equipo al que pertenece el usuario.')),
        'user' => array('type' => 'user', 'label' => t('Capitan del equipo.')),
        'torneo' => array('type' => 'node', 'label' => t('Detalles del torneo.')),
      ),
    ),
  );
}
/**
 *	Función para actualizar los puntos obtenidos por
 *	los equipos participantes en un desafío
 *	Hace el cálculo de puntos y llama a la función de actualizar ránking
 *
 *	@param
 *			nid_Equipo_Local
 *			nid_Equipo_Visitante
 *			nid_Ganador
 *			Puntuacion_Local
 *			Puntuacion_Visitante
 *		
 */
function _ranking_calcula_desafio ($nid_Equipo_Local, $nid_Equipo_Visitante, $nid_Ganador, $Puntuacion_Local, $Puntuacion_Visitante) {	
	db_set_active('eSM');
		$puntos_jugador_superior = db_query('SELECT * FROM {Puntos_Desafio_Jugador_Superior}');
		$puntos_jugador_inferior = db_query('SELECT * FROM {Puntos_Desafio_Jugador_Inferior}');
	db_set_active('default');
	
	$diferenciaPuntuacion = $Puntuacion_Local - $Puntuacion_Visitante;
			
	if( $diferenciaPuntuacion < 0 ) {		//El Equipo Local es el de Puntuación Inferior
		$diferenciaPuntuacion *= -1;
		//Calculamos los puntos que gana/pierde el Equipo Local
		while ($regla = db_fetch_array($puntos_jugador_inferior)) {
			if ($diferenciaPuntuacion <= $regla['Diferencia_Puntos']) {
				if ($nid_Ganador == $nid_Equipo_Local)  {		//El Equipo Local es el ganador
					actualizar_ranking( $nid_Equipo_Local, $regla['Puntos_Win'], 0, 1);
				}
				else {															//El Equipo Visitante es el ganador
					actualizar_ranking( $nid_Equipo_Local, $regla['Puntos_Loss'], 0, 0);
				}
                break;
			}
		}
		//Calculamos los puntos que gana/pierde el Equipo Visitante
		while ($regla = db_fetch_array($puntos_jugador_superior)) {
			if ($diferenciaPuntuacion <= $regla['Diferencia_Puntos']) {
				if ($nid_Ganador == $nid_Equipo_Visitante)  {		//El Equipo Visitante es el ganador
					actualizar_ranking( $nid_Equipo_Visitante, $regla['Puntos_Win'], 0, 1);
				}
				else {															//El Equipo Local es el ganador
					actualizar_ranking( $nid_Equipo_Visitante, $regla['Puntos_Loss'], 0, 0);
				}
                break;
			}
		}
	}
	else {									//El Equipo Visitante es el de Puntuación Inferior
		//Calculamos los puntos que gana/pierde el Equipo Local
		while ($regla = db_fetch_array($puntos_jugador_superior)) {
			if ($diferenciaPuntuacion <= $regla['Diferencia_Puntos']) {
				if ($nid_Ganador == $nid_Equipo_Local)  {		//El Equipo Local es el ganador
					actualizar_ranking( $nid_Equipo_Local, $regla['Puntos_Win'], 0, 1);
				}
				else {															//El Equipo Visitante es el ganador
					actualizar_ranking( $nid_Equipo_Local, $regla['Puntos_Loss'], 0, 0);
				}
                break;
			}
		}
		//Calculamos los puntos que gana/pierde el Equipo Visitante
		while ($regla = db_fetch_array($puntos_jugador_inferior)) {
			if ($diferenciaPuntuacion <= $regla['Diferencia_Puntos']) {
				if ($nid_Ganador == $nid_Equipo_Visitante)  {		//El Equipo Visitante es el ganador
					actualizar_ranking( $nid_Equipo_Visitante, $regla['Puntos_Win'], 0, 1);
				}
				else {															//El Equipo Local es el ganador
                    actualizar_ranking( $nid_Equipo_Visitante, $regla['Puntos_Loss'], 0, 0);
				}
                break;
			}
		}
	}	
}
	
	
	
	
/**
 *	Función para calcular el ranking luego de un desafío
 *	@Param 
 *	$equipos -- Arreglo con los equipos integrantes del torne que contiene:
 *		Indice $i -> Identificador arbitrario
 *		$equipos [$i]['nid_Equipo'] es el nid del Equipo
 *		$equipos [$i]['ronda']
 */
function _ranking_calcula_torneo( $equipos ) {
	db_set_active('eSM');
		$resultado = db_query('SELECT * FROM {Puntuacion_Torneos} ORDER BY Inscritos ASC');
	db_set_active('default');
	
	$numero_equipos = sizeof( $equipos );
	
	while($tabla_puntuacion = db_fetch_array($resultado)) {
		if ($numero_equipos <= $tabla_puntuacion['Inscritos'])
			break;
	}
	
	//Encuentra el número de rondas necesarias
	//para realizar el torneo.
    $bracketSize = 2;
    $numrounds = 2;
    while($numero_equipos > $bracketSize) {
      $numrounds++;
      $bracketSize = $bracketSize * 2;
    }
	
	//Recorre todos los brackets para ver que equipos llegaron a cada ronda
	$win = 0;
	for ($ronda = 1; $ronda <= $numrounds; $ronda++) {
		if ($ronda == $numrounds)
			$win = 1;
			
		//Recorre todo el arreglo de participantes para encontrar
		//los equipos que llegaron hasta la ronda actual en $ronda
		foreach($equipos as $i => $equipo) {
		  if ($equipo['ronda'] == $ronda) {
			actualizar_ranking($equipo['nid_Equipo'], $tabla_puntuacion[$bracketSize], 1, $win) ;
		  }
		}
		
		//Divide entre 2 el tamaño del bracket para la siguiente ronda
		$bracketSize  = $bracketSize / 2;
	}
}	
/**
 * Función para actualizar el ranking de un equipo
 * Recibe el nind_Equipo, Puntación a sumar, Win (1) /Loss (0)
 * La variable torneo indica si la actualización es por torneo y el valor es 0 por defecto (No es torneo)
 * La variable win indica si ganó o perdió el desafío y el valor por defecto es 0 (Perdió el desafío)
 */
function actualizar_ranking($nid_Equipo, $puntos, $torneo = 0, $win = 0) {
    db_set_active('eSM');
        $puntuacion = db_fetch_object(db_query('SELECT * FROM {Puntuacion} WHERE nid_Equipo = %d', $nid_Equipo));
    db_set_active('default');

    if ($torneo == 0) {         //El partido es un desafío, hace la actualización de puntos y partidos jugados
		
		if ($win == 1)
			$puntuacion->Puntuacion = $puntuacion->Puntuacion + $puntos;    //Actualiza los puntos del equipo
		else 
			$puntuacion->Puntuacion = $puntuacion->Puntuacion - $puntos;    //Actualiza los puntos del equipo
		
        ++$puntuacion->PJ;      //Suma otro partido a los partidos jugados por el equipo
        
        if($puntuacion->Puntuacion < 0)     //Asegura que la puntuación nunca vaya a bajar de cero.
            $puntuacion->Puntuacion = 0;
        
        if ($win == 0) {        //El equipo perdió el partido
            
            if($puntuacion->Racha > 0)
                $puntuacion->Racha == 0;        //Resetea la racha a cero
        }
        else {
            if ($puntuacion <= 0) {
                watchdog('ranking', 'Ha ocurrido un error al calcular los puntos del partido : '. $nid_Equipo, NULL, WATCHDOG_ERROR);
                return;
            }
            
            ++$puntuacion->PG;      //Incrementa el número de partidos ganados
            ++$puntuacion->Racha;   //Incrementa la racha del jugador
        }
    }
    elseif ($torneo == 1) {
		
		$puntuacion->Puntuacion = $puntuacion->Puntuacion + $puntos;    //Actualiza los puntos del equipo
		
        if ($puntos < 0 ) {
            watchdog('ranking', 'Ha ocurrido un error al calcular los puntos del partido : '. $nid_Equipo, NULL, WATCHDOG_ERROR);
            return;
        }
        ++$puntuacion->TJ;
        if ($win == 1)
            ++$puntuacion->TG;
    }
    
    db_set_active('eSM');
        db_query('UPDATE {Puntuacion} SET Puntuacion = %d, PJ = %d, PG = %d, Racha = %d, TJ = %d, TG = %d WHERE nid_Equipo = %d', $puntuacion->Puntuacion, $puntuacion->PJ, $puntuacion->PG, $puntuacion->Racha, $puntuacion->TJ, $puntuacion->TG, $nid_Equipo);
    db_set_active('default');
    
    return;
}
/**
 * Función para obtener el ránking de una modalidad
 *
 * @param
 * 		id_Modalida_Juego_Temporada
 * 		
 * @return
 * 		objeto db_query con la tabla ordenada de equipos
 */
function ranking_get_ranking($id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$result = db_query('SELECT * FROM {Puntuacion} AS p INNER JOIN {Equipo} AS e
				   ON p.nid_Equipo = e.nid_Equipo
				   WHERE id_Modalidad_Juego_Temporada = %d AND e.Estado = %d
				   ORDER BY Puntuacion DESC, PG DESC, TJ DESC, PJ DESC, p.nid_Equipo ASC',
				   $id_Modalidad_Juego_Temporada, ACTIVO);
	db_set_active('default');
	
	return $result;
}
/**
 * Función para usar combinada con ranking_get_ranking
 * coloca en un arreglo todos los equipos participantes en el ránking
 *
 * @param
 * 		id_Modalida_Juego_Temporada
 * 		
 * @return
 * 		arreglo con la tabla ordenada de equipos
 */
function ranking_get_ranking_arreglo($id_Modalidad_Juego_Temporada) {
	$ranking = ranking_get_ranking($id_Modalidad_Juego_Temporada);
	
	$result = array ();
	while ($equipo = db_fetch_object($ranking)) {
		$result[$equipo->nid_Equipo] = $equipo;
	}
	
	return $result;
}
/**
 * Funciónn para obtener la posición en el ránking de un equipo
 *
 * @param
 *  nid_Equipo
 *  id_Modalidad_Juego_Temporada
 *
 * @return
 *  ranking
 */
function ranking_get_ranking_equipo ($nid_Equipo, $id_Modalidad_Juego_Temporada) {
    //Obtiene el ranking de la modalidad
    $ranking = ranking_get_ranking($id_Modalidad_Juego_Temporada);
    
	$posicion = 1;
	while ($equipo = db_fetch_object($ranking)) {
		if ($equipo->nid_Equipo == $nid_Equipo)
            return $posicion;
        
        ++$posicion;
	}
}
/**
 * Funciónn para obtener la división a la que pertenece un equipo
 *
 * @param
 *  nid_Equipo
 *  id_Modalidad_Juego_Temporada
 *
 * @return
 *  division
 */
function ranking_get_division_equipo ($posicion) {
  db_set_active('eSM');
    $divisiones = db_query('SELECT * FROM {Puntuacion_Divisiones} ORDER BY Jugadores ASC');
  db_set_active('default');
  
  while($division = db_fetch_object($divisiones)) {
    if(!($posicion > $division->Jugadores))
      return $division->Nombre;
  }
  
  return $division->Nombre;
}
/**
 * Función para obtener la puntuación de un equipo
 *
 * @param
 *  nid_Equipo
 */
function _ranking_get_team_puntuacion ($nid_Equipo) {
	db_set_active('eSM');
		$result = db_fetch_object(db_query('SELECT * FROM {Puntuacion} WHERE nid_Equipo = %d', $nid_Equipo));
	db_set_active('default');
	
	return $result;
}
/**
 * Función para desplegar el contenido del bloque de ránking
 */
function _ranking_get_block() {
  $area = arg(0);
  // Check that we're in the right area. 
  if (!($area == 'taxonomy') && !is_numeric(arg(2)))
    return;
  
  $tid = arg(2);
  if (is_object($modalidad = term_is_active($tid))) {
    $ranking = ranking_get_ranking($modalidad->id_Modalidad_Juego_Temporada);
    $count = 0;
    while($ranking_equipo = db_fetch_object($ranking)) {
      ++ $count;
      //Solo vamos a mostrar los primeros 10 equipos
      //TODO: Hacer este número configurable en las opciones del bloque
      if($count > 10)
        break;
      
      $equipo = node_load(array('nid' => $ranking_equipo->nid_Equipo));
      $row = array();
      $row['place'] = $count;
      $row['image'] = theme('team_pane', $equipo, variable_get('team_block_roster_picture_preset', ''));
      $row['name'] = l($equipo->title, 'node/'. $equipo->nid);
      $row['pts'] = $ranking_equipo->Puntuacion;
      $rows[] = $row;
    }
    if($count > 0) {
      $header = array(t('Lugar'), t(''), t('Nombre'), t('Puntos'));
      return theme('table', $header, $rows);
    }
    else {
      return '<div class="form_element">No hay equipos registrados en el ranking todavia.</div>';
    }
  }
  return;
}