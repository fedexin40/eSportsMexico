<?php
// $Id: leaguesite.module,v 1.21 2010/09/21 17:03:04 alun Exp $


include ( "db_functions.php" );

/**
* Display help information for the module
* @param path - which path of the site we are displaying help
* @param arg - array that holds the current path as would be returned from arg() function
* @return help = text for the path
*/

// Define los estados para la variable de agentes libres
  define( 'PENDIENTE', 3 );
  define( 'TIENE_EQUIPO', 2 );
  define( 'AGENTE_LIBRE', 1 );
  define( 'NO_REGISTRADO', 0 );
	 
// Define los estados para las solicitudes de los jugadores
  define( 'INVITADO', 1 );
  define( 'SOLICITA', 2 );
  define( 'ACEPTADO', 3 );
  define( 'RECHAZADO', 4 );
	 

function team_help($path, $arg){
	$output = '';
	switch($path){
		case 'admin/help#team':
			$output = '<p>'.t("Permite manejar y crear equipos para participare en los ránkings de las modalidades").'</p>';
			break;
		case 'admin/content/team':
			$output = '<p>'.t('Este módulo permite crear y administrar una serie de equipos para participar en los ránkings de las diferentes modalidades').'</p>';
			break;
	}
	return $output;
} //end function leaguesite_help()


/**
* Implementation of hook_perm()
* Outlines permissions for this module.
* @return array - An array of valid permissions for the leaguesite module
*/
function team_perm(){
	return array('create team', 'edit own team', 'delete own team', 'view team');
}//end function leaguesite_perm()
/**
 * Implementation of hook_menu()
 * Admin menu link for the module
 * @return unknown_type
 */
function team_menu(){
	$items [ 'inscripcion/%' ] = array (			
	  'title' => 'Inscripción',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('inscripcion'),
	  'access arguments' => array ('create team'),
	  'file' => 'inc/inscripcion.inc',
	);
	$items [ 'inscripcion/multijugador/%' ] = array (
	  'title' => 'Inscripción',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('team_inscripcion'),
	  'access arguments' => array ('create team'),
	  'type' => MENU_LOCAL_TASK,
	  'file' => 'inc/inscripcion.inc',
	);
	//MENÚ para administrar equipos
	$items['node/%node/plantilla'] = array(
	  'title' => 'Plantilla de Jugadores',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_plantilla' ),
      'access callback' => 'team_ver_plantilla',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	  'file' => 'inc/team_plantilla.inc',
	);

	//MENÚ para administrar equipos
	$items['node/%node/administrar'] = array(
	  'title' => 'Administrar Jugadores',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_administrar' ),
	  'access callback' => 'team_admin_access',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	  'file' => 'inc/team_administracion.inc',
	);
	$items['node/%node/administrar/activos'] = array
	(
	  'title' => 'Jugadores activos',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_administrar_activos' ),
	  'access callback' => 'team_admin_access',
	  'file' => 'inc/team_administracion.inc',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	);
	$items['node/%node/administrar/solicitudes'] = array(
	  'title' => 'Solicitudes',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_administrar_solicitudes' ),
	  'access callback' => 'team_admin_access',
	  'file' => 'inc/team_administracion.inc',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	);
	$items['node/%node/administrar/invitados'] = array
	(
	  'title' => 'Invitados',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('team_administrar_invitados'),
	  'file' => 'inc/team_administracion.inc',
	  'access callback' => 'team_admin_access',
	  'access arguments' => array(1),
	  'type' => MENU_LOCAL_TASK,
	);
	//MENÚ de agentes libres
	$items [ 'libres/%' ] = array (
	  'title' => 'Agentes Libres',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('agente_libre'),
	  'access arguments' => array ('create team'),
	  'file' => 'inc/agentes_libres.inc',
	  'type' => MENU_CALLBACK,
	);
	$items [ 'libres/%/lista' ] = array (
	  'title' => 'Agente Libre',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('agente_libre_listar'),
	  'access arguments' => array ('create team'),
	  'file' => 'inc/agentes_libres.inc',
	  'type' => MENU_CALLBACK,
	);
	//MENU que despliega la lsita de los equipos que todavía no están completos
	$items [ 'equipos/%/disponibles' ] = array (
	  'title' => 'Equipos en Formacion',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('equipos_disponibles_listar'),
	  'access arguments' => array ('create team'),
	  'file' => 'inc/equipos_disponibles.inc',
	  'type' => MENU_CALLBACK,
	);
    
	//MENÚ que aparece en la ficha de jugadores para recibir y administrar invitaciones y solicitudes
	$items [ 'user/%/invitar/%' ] = array (
		'title' => 'Invitar Jugador',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('invitar_usuario'),
		'access arguments' => array('create team'),
		'file' => 'inc/invitar_jugador.inc',
		'type' => MENU_CALLBACK,
	);
    
	$items[ 'node/%node/solicitar' ] = array(
	  'title' => 'Unirme a este equipo',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_solicitud' ),
	  'access callback' => 'unirme_equipo_access',
      'access arguments' => array ( 1 ),
	  'type' => MENU_LOCAL_TASK,
	  'file' => 'inc/team_solicitud.inc',
	);

	//TODO Menú para desligarse de un equipo
	//MENÚ para darse de baja de un equipo
	/*$items [ 'user/%/baja_equipo' ] = array (
		'title' => 'Invitaciones del Jugador',
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'administrar_invitaciones' ),
		'access arguments' => array( 'view team' ),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_LOCAL_TASK,
	);*/
	
	
	//MENÚ que aparece en la ficha de jugador para aceptar y rechazar solicitudes recibidas
	$items [ 'user/%/invitaciones' ] = array (
		'title' => 'Invitaciones del Jugador',
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'administrar_invitaciones' ),
		'access arguments' => array( 'create team' ),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_LOCAL_TASK,
	);	
	
	//Página para rechazar invitaciones
	$items [ 'user/%/rechazar_invitacion' ] = array (
		'title' => 'Rechazar invitación',
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'rechaza_invitacion' ),
		'access arguments' => array( 'create team' ),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_CALLBACK,
	);
    
	//MENÚ para que se pueda acceder a un pequeño formulario con la información de los equipos a los que pertenece un usuario
	$items [ 'user/%/myteams'] = array (
			'title' => 'Mis Equipos',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('equipos_usuario'),
			'access arguments' => array('view team'),
			'file' => 'inc/equipos_usuario.inc',
			'type' => MENU_CALLBACK,
	);

	return $items;
}
	
/**
 * Implementation of hook_node_info()
 */
function team_node_info() {
	return array(
		'team' => array(
			'name' => t('Equipo'),
			'module' => 'team',
			'description' => t("Un equipo para participar en el ránking de una modalidad."),
		)
	);
} 

/**
 * Implementation of hook_access()
 */
function team_access($op, $node, $account){
	if($op == 'view'){
		return user_access('view team', $account);
	}
	
	if ($op == 'create') {
		// Only users with permission to do so may create this node type.
		return user_access('create team', $account);
	}

	// Users who create a node may edit or delete it later, assuming they have the
	// necessary permissions.
	if ($op == 'update' || $op == 'delete') {
		if (user_access('edit own team', $account) && ($account->uid == $node->uid)) {
			return TRUE;
		}
	}
} 

/**
 * Implementation of hook_form()
 * @param $node
 * @param $form_state
 * @return unknown_type
 */
function team_form(&$node, $form_state) {

	module_load_include( 'php', 'base_datos_externa', 'db_functions' );

	//Si estamos en una modalidad individual, sugiere al usuario que el nombre por defecto de su equipo sea su nombre de usuario.
	global $user;
	$default = '';
	$id_Modalidad_Juego_Temporada = arg( 3 );


	$modalidad = get_modalidad_juego_temporada( $id_Modalidad_Juego_Temporada );
	 if ( ( $modalidad->Maximo_Jugadores == 1 ) && ( !isset( $node->title ) ) ) {
	  $node->title = $user->name;
	  $form[ 'title' ][ '#disabled' ] = TRUE;
	 }
	
	$form[ 'id_Modalidad_Juego_Temporada' ] = array
	(
	  '#type' => 'hidden',
	  '#value' => arg( 3 ),
	);
	
	$type = node_get_types('type', $node);
	if( !isset( $node->archive ) )
	  $node->archive = 0;
	
	//TODO Agregar un campo de imagen con construction kit

	// We need to define form elements for the node's title and body.
	$form[ 'title' ] = array
	(
	  '#type' => 'textfield',
	  '#title' => t( 'Nombre de equipo' ),
	  '#required' => TRUE,
	  '#default_value' => $node->title,
	  '#weight' => -6,
	);
	
	$form[ 'abreviacion' ] = array(
	  '#type' => 'textfield',
	  '#title' => t( 'Abreviacion' ),
	  '#description' => t('Ingresa el tag de tu equipo.'),
	  '#required' => FALSE,	
	  '#default_value' => $node->abreviacion,
	  '#weight' => -5,
	);
	// We want the body and filter elements to be adjacent. We could try doing
	// this by setting their weights, but another module might add elements to the
	// form with the same weights and end up between ours. By putting them into a
	// sub-array together, we're able force them to be rendered together.
	$form['body_filter']['body'] = array(
	  '#type' => 'textarea',
	  '#title' => t( 'Descripcion del Equipo' ),
	  '#default_value' => $node->body,
	  '#required' => FALSE,
	  '#description' => t('Puedes ingresar la información que quieras sobre el equipo, su historia o sus miembros en este espacio.'),
	);
	$form[ 'body_filter' ][ 'filter' ] = filter_form( $node->format );
	
	return $form;
}
/**
 * Implementation of hook_insert()
 * @param $node - the node which is being inserted
 * This is for when someone creates a node, we save the abbreviation of the team.
 */
function team_insert( $node ){
	global $user;
    
	db_set_active ( 'eSM' );
	  db_query("INSERT INTO {Equipo} (nid_Equipo, id_Modalidad_Juego_Temporada, Abreviacion) VALUES (%d, %d, '%s');", $node->nid, $node->id_Modalidad_Juego_Temporada, $node->abreviacion);
		
		db_query("INSERT INTO { Puntuacion }  ( nid_Equipo ) VALUES ( %d );", $node->nid );
  
	  db_query("INSERT INTO {Jugador} (id_Modalidad_Juego_Temporada, uid, Fecha_Registro, Estado) VALUES ( %d, %d, %d, %d );", $node->id_Modalidad_Juego_Temporada, $user->uid, string_to_timestamp( date( 'Y-m-d' ) ), TIENE_EQUIPO );
    
    db_set_active ('default');
    
    db_set_active ('eSM');
  
	  $jugador = db_fetch_array(db_query('SELECT {id_Jugador} FROM {Jugador} WHERE {id_Modalidad_Juego_Temporada} = %d AND {uid} = %d', $node->id_Modalidad_Juego_Temporada, $user->uid));
	  
	  db_query('INSERT INTO {Integrantes_Equipo} (nid_Equipo, id_Jugador, Estado) VALUES ( %d, %d, %d)', $node->nid, $jugador[ 'id_Jugador' ], ACEPTADO);
	
	db_set_active ( 'default' );
}

/**
 * Función para verificar que el usuario no esté dado de alta como jugador de otro equipo antes de crear el suyo propio.
 */
function team_validate($node, $form) {
	global $user;
	$tiene_equipo = tiene_equipo($user->uid, $node->id_Modalidad_Juego_Temporada);
	
	//Verifica si el jugador es un agente libre o no está registrado
	if ($tiene_equipo == TIENE_EQUIPO) {
        form_set_error('id_Modalidad_Juego_Temporada', 'No puedes crear un equipo para esta modalidad porque ya perteneces a otro.</br>Abandona tu equipo actual para poder crear otro.');
		//dpm ('No puedes crear un equipo para esta modalidad porque ya perteneces a otro.</br>Abandona tu equipo actual para poder crear otro.', 'error');
		drupal_goto('user/' . $user->uid);
	}
}


/**
 * Implementación del hook_node_load()
 */
function team_load($node){
		
	db_set_active ( 'eSM' );
		
		$team_data = db_query('SELECT {Abreviacion}, {id_Modalidad_Juego_Temporada} FROM {Equipo} WHERE {nid_Equipo} = %d', $node->nid );
		$team_i = db_query('SELECT * FROM {Integrantes_Equipo} WHERE {nid_Equipo} = %d AND {Estado} = %d', $node->nid, ACEPTADO );
		$team_puntuacion = db_fetch_object(db_query('SELECT * FROM {Puntuacion} WHERE {nid_Equipo} = %d', $node->nid )); 
	db_set_active ( 'default' );
    
	$team = db_fetch_array($team_data);

	$node->abreviacion = $team['Abreviacion'];		//Agrega la abreviación al nodo equipo
	$node->id_Modalidad_Juego_Temporada = $team['id_Modalidad_Juego_Temporada'];	//Agrega al nodo equipo el id_Modalidad_Juego_Temporada al que pertenece el equipo
	
	//Cuenta cuantos integrantes tiene el equipo y lo agrega al objeto nodo
	$no_integrantes = 0;
	$integrantes = array( );
	
	while ($jugador = db_fetch_object($team_i)) {
        db_set_active('eSM');
            $jugador = db_fetch_object(db_query('SELECT * FROM {Jugador} WHERE id_Jugador = %d', $jugador->id_Jugador));
        db_set_active('default');
        
        $integrantes[ $jugador->id_Jugador ] = $jugador;
		$no_integrantes++;
	}
	$node->Numero_Integrantes = $no_integrantes;
    $node->Integrantes = $integrantes;

    $node->Racha = $team_puntuacion->Racha;
    
    if($team_puntuacion->PJ > 0)
        $node->Victorias = $team_puntuacion->PG / $team_puntuacion->PJ;
    else
        $node->Victorias = 0;
}
/**
 * Implementación del hook_node_delete()
 */
function team_delete($node){

}
/**
 * Implementación del hook_block()
 */
function team_block( $op = 'list', $delta = 0 ){

	module_load_include( 'php', 'base_datos_externa', 'db_functions' );
	
    switch( $op ) {
        case 'list':
            $block = array();
            $block[ 0 ][ 'info' ] = t('Despliega los links para inscribirse a las modalidades.');
            $block[ 1 ][ 'info' ] = t('Muestra los equipos a los que el jugador pertenece.');

            break;
		
        case 'view':
            
            switch( $delta ) {
                case 0:
                    if (arg(1) == 'term' && is_numeric(arg(2)))
						$tid = arg(2);
					
					if ((arg(0) == 'puntuacion' || arg(0) == 'libres' || arg(0) == 'equipos' || arg(0) == 'desafios') && is_numeric(arg(1)))
						$tid = arg(1);
						
					if (arg(0) == 'inscripcion' && is_numeric(arg(2)))
						$tid = arg(2);
						                    
					if ( is_object( $modalidad = term_is_active( $tid )) ) {
						$block[ 'subject' ] = 'Equipos';
						$content[] = l( t( 'Principal' ), 'taxonomy/term/'.$tid );
						$content[] = l( t( 'Inscribete' ), 'inscripcion/'.$tid );
						if (module_exists('match')) {
							$content[] = l( t( 'Tablero de desafios' ), 'libres/'. $tid . '/lista' );
							$content[] = l( t( 'Proximos Partidos' ), 'desafios/'. $tid . '/proximos' );
							$content[] = l( t( 'Ultimos Resultados' ), 'desafios/'. $tid . '/resultados' );
						}
						if ($modalidad->Maximo_Jugadores > 1) {
							$content[] = l( t( 'Agentes Libres' ), 'libres/'. $tid . '/lista' );
							$content[] = l( t( 'Equipos en Formacion' ), 'equipos/'. $tid . '/disponibles' );
						}
						if (module_exists('ranking'))
							$content[] = l( t( 'Puntuacion' ), 'puntuacion/'. $tid );
							
						$content[] = l(t('Reglas'), 'node/'. $modalidad->reglas);
						
						$block[ 'content' ] = theme('menu_tree', theme('item_list', $content));
					}
                    break;
                
                case 1:
                    if ($equipos = get_user_teams(arg(1))) {
                        $block['subject'] = t('Juegos en los que participa');
                        $block['content'] = $equipos;
                    }
                    break;
                }
			break;
    
        case 'save':
                
            break;

        case 'configure':
            
            break;
    }
	return $block;

}
/**
 * Función para decidir si el usuario tiene accinseso a las pestañas de administración del equipo
 * dependiendo de si es el capitán del equipo y si es un equipo formado por más de una persona
 */
function team_admin_access($node) {
	module_load_include( 'php', 'base_datos_externa', 'db_functions' );
	
	global $user;
	$modalidad = get_modalidad_juego_temporada($node->id_Modalidad_Juego_Temporada);
	
	if (($modalidad->Maximo_Jugadores > 1) && ($node->uid == $user->uid) && ($node->type == 'team')){
		return TRUE;
	}
	else {
		return FALSE;
	}
}
/**
 * Función para decidir si debe o no aparecer la pestaña de plantilla
 */
function team_ver_plantilla($node) {
	module_load_include( 'php', 'base_datos_externa', 'db_functions' );
	
	global $user;
	$modalidad = get_modalidad_juego_temporada($node->id_Modalidad_Juego_Temporada);
	
	if (($modalidad->Maximo_Jugadores > 1) && user_access('view team', $user) && ($node->type == 'team')){
		return TRUE;
	}
	else {
		return FALSE;
	}
}

/**
 * Función para decidir si el usuario tiene acceso a la pestaña de "Unirme a este Equipo"
 * Revisamos que la modalidad sea para un equipo de varios integrantes y que el usuario no sea el capitán
 * Revisa si el usario está registrado en esta modalidad y si tiene equipo o es agente libre
 */
function unirme_equipo_access($node) {
		module_load_include( 'php', 'base_datos_externa', 'db_functions' );
	
    global $user;
    $modalidad = get_modalidad_juego_temporada($node->id_Modalidad_Juego_Temporada);

    $tiene_equipo = tiene_equipo($user->uid, $node->id_Modalidad_Juego_Temporada);
    
	if (($modalidad->Maximo_Jugadores > 1) && ($node->uid != $user->uid) && ($node->type == 'team')){
        
        if (($tiene_equipo == AGENTE_LIBRE) || ($tiene_equipo == NO_REGISTRADO))
            return TRUE;
        else
            return FALSE;
	}
    else {
        return FALSE;
    }
}
/**
 * Implementation of hook_rules_event_info().
 * Usado para:
 * 		- notificar a los capitanes de las solicitudes de inscripción a su equipo, cuando un jugador decide salirse de su equipo
 * 		- notificar a los usuarios de cuando los invitan a un equipo o rechazan sus solicitudes
 * @ingroup rules
 */
function team_rules_event_info() {
  return array(
    'solicitud_usuario' => array(
      'label' => t('UserA ha solicitado entrar al equipo de userB'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, el que ha solicitado unirse al equipo de userB.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, capitan del equipo al que UserA desea unirse.')),
        'team' => array('type' => 'node', 'label' => t('Equipo al que userA quiere unirse.')),
      ),
    ),
    'usuario_aceptado' => array(
      'label' => t('UserA ha aceptado a userB como parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que a aceptado a userB en su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido aceptado en el equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo en el que UserB ha sido aceptado.')),
      ),
    ),
    'usuario_expulsado' => array(
      'label' => t('UserA ha expulsado a userB de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que a expulsado a userB de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido expulsado del equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo del que UserB ha sido expulsado.')),
      ),
    ),
    'usuario_rechazado' => array(
      'label' => t('UserA ha rechazado la soclicitud de userB de formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha rechazado la solicitud de userB de formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido rechazado por UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo del que UserB ha sido rechazado.')),
      ),
    ),
    'usuario_invitado' => array(
      'label' => t('UserA ha invitado a userB a formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha invitado a userB a formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que ha sido invitado al equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo al que UserB ha sido invitado.')),
      ),
    ),
    'invitacion_aceptada' => array(
      'label' => t('UserA ha aceptado la invitacion de formar parte del equipo de userB'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha aceptado la solicitud de userB de formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que habia invitado a UserA.')),
		'team' => array('type' => 'node', 'label' => t('Equipo en el que UserB ha aceptado participar.')),
      ),
    ),
    'invitacion_rechazada' => array(
      'label' => t('UserA ha rechazado la invitacion de userB de formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha rechazado la invitacion de userB para formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que habia invitado a UserA a su equipo.')),
		'team' => array('type' => 'node', 'label' => t('Equipo al que UserA había sido invitado.')),
      ),
    ),
  );
}
/**
 * Función que permite conocer el estado de un jugador para una modalidad
 * Recibe el uid del jugador que se quiere revisar
 * y el id_Modalidad_Juego_Temporada para el cual se quiere hacer la evaluación
 * Devuelve:
 * 0 - si el jugador no está inscrito
 * 1 - si el jugador es agente libre
 * 2 - si el jugador tiene equipo
 */
function tiene_equipo($uid, $id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$query = db_query('SELECT {Estado} FROM {Jugador} WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d', $uid, $id_Modalidad_Juego_Temporada);
	db_set_active('default');
    
	
	while ($result = db_fetch_array($query)) {
	    if ($result['Estado'] == AGENTE_LIBRE) {
            ++$count;
			return AGENTE_LIBRE;
	    }
        if ($result['Estado'] == TIENE_EQUIPO) {
            ++$count;
            return TIENE_EQUIPO;
        }
	}
    
	return NO_REGISTRADO;
}
/**
 * Función para obtener los datos de un jugador
 * recibe el uid del jugador y el id_Modalidad_Juego_Temporada en el que buscar
 * devuelve un objeto con los datos del jugador o NULL si no encuentra
 */
function get_jugador($uid, $id_Modalidad_Juego_Temporad) {
    db_set_active('eSM');
        $jugador = db_fetch_object(db_query('SELECT * FROM {Jugador} WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d', $uid, $id_Modalidad_Juego_Temporad));
    db_set_active('default');
    
    return $jugador;
}
/**
 * función para obtener los equipos inscritos
 * en una modalidad de la temporada activa
 * recibe el id_Modalidad_Juego_Temporada
 * devuelve el resultado de la consulta para que
 * se pueda procesar con db_fetch_object
 * o db_fetch_array
 */
function get_teams($id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$teams = db_query('SELECT * FROM {Equipo} AS e INNER JOIN {Puntuacion} AS p ON e.nid_Equipo = p.nid_Equipo WHERE {id_Modalidad_Juego_Temporada} = %d ORDER BY Puntuacion DESC', $id_Modalidad_Juego_Temporada);
	db_set_active('default');
	
	return $teams;
}
/**
 * Implementación del hoock theme
 */
function team_theme() {
    return array (
        'lista_agentes_libres' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/lista_agentes_libres.inc',
        ),
        'team_inscripcion' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_inscripcion.inc',
        ),
        'team_plantilla' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_plantilla.inc',
        ),
        'user_invitaciones' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/user_invitaciones.inc',
        ),
        'team_solicitudes' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_solicitudes.inc',
        ),
    );
}
/**
 * Función que devuelve en un arreglo todos los equipos a los que pertenece un usuario
 * recibe el uid del usuario que se quiere evaluar
 */
function get_user_teams($uid) {
    $usuario = user_load(array(uid => $uid));
    
    $modalidades_activas = get_modalidades_activas();   //Obtiene todas las modalidades activas en una temporada
    $output = '';
    
    foreach($modalidades_activas as $indice => $modalidad) {
        db_set_active('eSM');       //Obtiene los equipos inscritos en la modalidad actual
            $result = db_query('SELECT {nid_Equipo} FROM {Equipo} WHERE id_Modalidad_Juego_Temporada = %d', $modalidad->id_Modalidad_Juego_Temporada);
        db_set_active('default');
        
        while ($equipo = db_fetch_object($result)) {
            $equipo = node_load($equipo->nid_Equipo);       //Carga el nodo equipo para obtener los jugadores inscritos en el equipo.

            foreach($equipo->Integrantes as $indice => $jugador) {
                if ($jugador->uid == $usuario->uid) {          //Revisa cada uno de los integrantes para saber si el jugador pertenece
                    
                    $lista_equipos = get_teams($equipo->id_Modalidad_Juego_Temporada);     //Calcula el ránking del equipo en la tabla
                    $ranking = 1;
                    
                    while ($posicion = db_fetch_object($lista_equipos)) {

                        if ($equipo->nid == $posicion->nid_Equipo)
                            break;
                        else
                            ++$ranking;
                    }
                    
                    $output .= '<div class = "fondo_juegos">
                                    <div class = "left_'. str_replace( " ", "_", $modalidad->Nombre) .'"></div>
                                    <div class = "datos_equipo">
                                        <ul>
                                            <li>'. l($modalidad->Nombre, 'taxonomy/term/'. $modalidad->tid) .'</li>
                                            <li>'. l($equipo->title, 'node/'. $equipo->nid) .'</li>
                                            <li>'. $ranking .'</li>
                                            <li>'. $division .'</li>
                                        </ul>
                                    </div>
                                    <div class = "right_'. str_replace( " ", "_", $modalidad->Nombre) .'"></div>
                                </div>';
                }
            }
            
        }
    }
    return $output;
}
/**
 * Función para obtener la plantilla de un equipo
 */
function _team_get_plantilla($nid_Equipo) {
  db_set_active( 'eSM' );  //Carga todos los jugadores activos en el equipo.
    $jugadores = db_query
    (
      'SELECT
          *
        FROM
          { Jugador }
        AS
          j
      INNER JOIN
          { Integrantes_Equipo }
        AS
          ie
        ON
          j.{ id_Jugador } = ie.{ id_Jugador }
      INNER JOIN
        { Equipo }
        AS
          e
        ON
          ie.{ nid_Equipo } = e.{ nid_Equipo }
      WHERE
          e.{ nid_Equipo } = %d
        AND
          ie.{ Estado } = %d',
      $nid_Equipo,
      ACEPTADO
    );

  db_set_active('default');
  
  return $jugadores;
}
/**
 * Función para determinar si un usuario es capitán de un equipo determinado
 *
 * @param
 *      $uid - El uid del usuario a verificar
 *      $nid_Equipo - el nid del Equipo a verificar
 *
 * @return
 *      TRUE - Si el usuario es el capitán del equipo
 *      FALSE - Si el usuario no es capitán del equipo
 */
function team_user_is_team_capitan($uid, $nid_Equipo) {
    $equipo = db_fetch_object(db_query('SELECT * FROM {node} WHERE nid = %d', $nid_Equipo));
    
    if ($equipo->uid == $uid)
        return TRUE;
    else
        return FALSE;
}
/**
 * Función para obtener el equipo al que pertenece un usaurio en una modaldiad
 *
 * @param
 * 	$uid
 * 	$id_Modalidad_Juego_Temporada
 *
 * @return
 * 	object con los datos del equipo
 */
function _team_get_user_team_modalidad ($uid, $id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$equipo = db_fetch_array(db_query('SELECT e.nid_Equipo FROM {Equipo} AS e
										  INNER JOIN {Integrantes_Equipo} AS ie ON e.nid_Equipo = ie.nid_Equipo
										  INNER JOIN {Jugador} AS j ON ie.id_Jugador = j.id_Jugador
										  WHERE e.id_Modalidad_Juego_Temporada = %d AND uid = %d',
										  $id_Modalidad_Juego_Temporada, $uid));
	db_set_active('default');
	
	return node_load(array('nid' => $equipo['nid_Equipo']));
}