<?php
include ( "db_functions.php" );

/**
* Display help information for the module
* @param path - which path of the site we are displaying help
* @param arg - array that holds the current path as would be returned from arg() function
* @return help = text for the path
*/

// Define los estados para los equipos
  define( 'ACTIVO', 0 );
  define( 'INACTIVO', 1 );
  define( 'ELIMINADO', 4 );

// Define los estados para la variable de agentes libres
  define( 'PENDIENTE', 3 );
  define( 'TIENE_EQUIPO', 2 );
  define( 'AGENTE_LIBRE', 1 );
  define( 'NO_REGISTRADO', 0 );
	 
// Define los estados para las solicitudes de los jugadores
  define( 'INVITADO', 1 );
  define( 'SOLICITA', 2 );
  define( 'ACEPTADO', 3 );
  define( 'RECHAZADO', 4 );
  define( 'ABANDONO', 5 );
  define( 'EXPULSADO', 6 );

/**
 * Implementation of hook_help()
 */
function team_help($path, $arg){
	$output = '';
	switch($path){
		case 'admin/help#team':
			$output = '<p>'.t("Permite manejar y crear equipos para participare en los ránkings de las modalidades").'</p>';
			break;
		case 'admin/content/team':
			$output = '<p>'.t('Este módulo permite crear y administrar una serie de equipos para participar en los ránkings de las diferentes modalidades').'</p>';
			break;
	}
	return $output;
} //end function leaguesite_help()
/**
* Implementation of hook_perm()
* Outlines permissions for this module.
* @return array - An array of valid permissions for the leaguesite module
*/
function team_perm(){
	return array('create team', 'edit own team', 'delete own team', 'view team', 'admin team');
}//end function leaguesite_perm()
/**
 * Implementation of hook_menu()
 * Admin menu link for the module
 * @return unknown_type
 */
function team_menu(){
	//Una página par administrar las opciones de los equipos
  $items['admin/base_datos_externa/team'] = array(
      'title' => t('Equipos'),
      'description' => t('Permite definir el funcionamiento de los equipos en la liga.'),
      'page callback' => 'team_admin',
      'access arguments' => array( 'admin team' ),	
      'type' => MENU_NORMAL_ITEM,
      'file' => 'inc/admin_team.inc',
      'weight' => -60,
  );
  //Función para crear la imagen del equipo
  $items['admin/base_datos_externa/team/image'] = array(
    'access arguments' => array('admin team'),
    'page callback' => 'team_add_image_field',
    'type' => MENU_CALLBACK,
    'file' => 'inc/admin_team.inc',
  );
  
  //MENU para desplegar la forma de registro de un equipo
	$items [ 'taxonomy/term/%/team/register' ] = array (			
	  'title' => t('Signup'),
    'page callback' => 'inscripcion',
	  'access arguments' => array ('create team'),
	  'file' => 'inc/inscripcion.inc',
    'type' => MENU_CALLBACK,
	);    
	//MENÚ para registrar un agente libre
	$items [ 'taxonomy/term/%/free_agent/register' ] = array (
	  'title' => 'Agentes Libres',
	  'page callback' => 'drupal_get_form',
    'page arguments' => array('agente_libre'),
	  'access arguments' => array ('create team'),
	  'file' => 'inc/agentes_libres.inc',
	  'type' => MENU_CALLBACK,
	);
  
  //MENUS para la pestaña de equipos en las modalidades de juegos
	$items [ 'taxonomy/term/%/teams'] = array (
			'title' => 'Equipos',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('equipos_disponibles'),
			'access arguments' => array('view team'),
			'file' => 'inc/equipos_disponibles.inc',
			'type' => MENU_LOCAL_TASK,
      'weight' => 100,
	);
	$items [ 'taxonomy/term/%/teams/list'] = array (
			'title' => 'Equipos',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('equipos_disponibles'),
			'access arguments' => array('view team'),
			'file' => 'inc/equipos_disponibles.inc',
			'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -100,
	);
	$items [ 'taxonomy/term/%/teams/free_agent' ] = array (
	  'title' => 'Agente Libre',
	  'page callback' => 'agente_libre_listar',
	  'access arguments' => array ('create team'),
	  'file' => 'inc/agentes_libres.inc',
	  'type' => MENU_LOCAL_TASK,
	);
  
	//MENÚ para administrar la plantilla de los equipos
	$items['node/%node/roster'] = array(
	  'title' => 'Roster',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_administrar_activos' ),
	  'access callback' => 'team_admin_access',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	  'file' => 'inc/team_administracion.inc',
    'weight' => 10,
	);
	$items['node/%node/roster/active'] = array (
	  'title' => 'Jugadores Activos',
	  'access callback' => 'team_admin_access',
	  'access arguments' => array( 1 ),
	  'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
	);
	$items['node/%node/roster/request'] = array(
	  'title' => 'Solicitudes',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_administrar_solicitudes' ),
	  'access callback' => 'team_admin_access',
	  'file' => 'inc/team_administracion.inc',
	  'access arguments' => array( 1 ),
	  'type' => MENU_LOCAL_TASK,
	);
	$items['node/%node/roster/invite'] = array (
	  'title' => 'Invitar',
    'page callback' => 'team_administrar_invitados',
	  'file' => 'inc/team_administracion.inc',
	  'access callback' => 'team_admin_access',
	  'access arguments' => array(1),
	  'type' => MENU_LOCAL_TASK,
    'weight' => 100,
	);
  
	//Formulario para aceptar invitaciones
	$items [ 'node/%node/join' ] = array (
		'title' => t('Acetpar Invitacion'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('aceptar_invitacion'),
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_CALLBACK,
	);
	//Formulario para rechazar invitaciones
	$items [ 'node/%node/decline' ] = array (
		'title' => t('Rechazar invitacion'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'rechazar_invitacion' ),
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_CALLBACK,
	);
  
	//MENÚ que permite al usuario administrar sus equipos
	$items [ 'user/%/teams' ] = array (
		'title' => t('Teams'),
		'page callback' => 'administrar_equipos',
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$items [ 'user/%/teams/active' ] = array (
		'title' => t('Teams Active'),
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items [ 'user/%/teams/invites' ] = array (
		'title' => t('Teams Invites'),
		'page callback' => 'administrar_invitaciones',
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_LOCAL_TASK,
	);
	$items [ 'user/%/teams/request' ] = array (
		'title' => t('Teams Request'),
		'page callback' => 'administrar_solicitudes',
    'access callback' => 'team_admin_access',
		'access arguments' => array(1),
		'file' => 'inc/invitaciones_jugador.inc',
		'type' => MENU_LOCAL_TASK,
	);
  
  //Formulario para solicitar unirse a un equipo
	$items[ 'node/%node/request' ] = array(
	  'title' => t('Solicitar Unirme'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_solicitud' ),
	  'access callback' => 'team_admin_access',
    'access arguments' => array ( 1 ),
	  'type' => MENU_CALLBACK,
	  'file' => 'inc/team_solicitud.inc',
	);
  //Formulario para confirmar la salida de un equipo
	$items[ 'node/%node/drop' ] = array(
	  'title' => t('Abandonar Equipo'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array( 'team_drop' ),
	  'access callback' => 'team_admin_access',
    'access arguments' => array ( 1 ),
	  'type' => MENU_CALLBACK,
	  'file' => 'inc/invitaciones_jugador.inc',
	);
  //Formulario para invitar a un jugador
  $items['user/%/invite/%'] = array(
    'title' => t('Invite Player'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invitar_usuario'),
    'access callback' => 'team_admin_access',
    'access arguments' => array (1),
    'type' => MENU_CALLBACK,
    'file' => 'inc/invitar_jugador.inc',
  );

	return $items;
}
/**
 * Implementation of hook_node_info()
 */
function team_node_info() {
	return array (
		'team' => array(
			'name' => t('Equipo'),
			'module' => 'team',
			'description' => t("Team for a game ranking."),
		)
	);
} 

/**
 * Implementation of hook_access()
 */
function team_access($op, $node, $account){
	if($op == 'view'){
		return user_access('view team', $account);
	}
	
	if ($op == 'create') {
		// Only users with permission to do so may create this node type.
		return user_access('create team', $account);
	}

	// Users who create a node may edit or delete it later, assuming they have the
	// necessary permissions.
	if ($op == 'update' || $op == 'delete') {
		if (user_access('edit own team', $account) && ($account->uid == $node->uid)) {
			return TRUE;
		}
	}
	return FALSE;
} 

/**
 * Implementation of hook_form()
 * @param $node
 * @param $form_state
 * @return unknown_type
 */
function team_form(&$node, $form_state) {
	global $user;
	$default = '';
	$tid = arg( 2 );

	//Verifica que la modalidad esté activa
	if (!($modalidad = term_is_active($tid))) {
    $form['mensaje'] = array (
      '#value' => t('Esta modalidad no esta activa y no se pueden crear equipos.'),
    );
    return $form;
  }
	
	$form[ 'id_Modalidad_Juego_Temporada' ] = array (
	  '#type' => 'hidden',
	  '#value' => $modalidad->id_Modalidad_Juego_Temporada,
	);
	
	$type = node_get_types('type', $node);
	if( !isset( $node->archive ) )
	  $node->archive = 0;

	// We need to define form elements for the node's title and body.
	$form[ 'title' ] = array (
	  '#type' => 'textfield',
	  '#title' => t( 'Nombre de equipo' ),
	  '#required' => TRUE,
	  '#default_value' => $node->title,
	  '#weight' => -6,
	);
	
	$form[ 'abreviacion' ] = array (
	  '#type' => 'textfield',
	  '#title' => t( 'Abreviacion' ),
	  '#description' => t('Ingresa el tag de tu equipo.'),
	  '#required' => TRUE,	
	  '#default_value' => $node->abreviacion,
	  '#weight' => 0,
	);

	$form['body_filter']['body'] = array (
	  '#type' => 'textarea',
	  '#title' => t( 'Descripcion del Equipo' ),
	  '#default_value' => $node->body,
	  '#required' => TRUE,
	  '#description' => t('Puedes ingresar la informacion que quieras sobre el equipo, su historia o sus miembros en este espacio.'),
	);
	$form[ 'body_filter' ][ 'filter' ] = filter_form( $node->format );
    
  //Si estamos en una modalidad individual, sugiere al usuario que el nombre por defecto de su equipo sea su nombre de usuario.
	if ( ( $modalidad->Maximo_Jugadores == 1 ) && ( !isset( $node->title ) ) ) {
	  $node->title = $user->name;
	  $form[ 'title' ][ '#disabled' ] = TRUE;
      $form[ 'title' ][ '#value' ] = $user->name;
	}
	
	return $form;
}
/**
 * Implementation of hook_insert()
 * @param $node - the node which is being inserted
 * This is for when someone creates a node, we save the abbreviation of the team.
 */
function team_insert( $node ){
	global $user;
  
  //1.- Primero verificamos si el jugador ya está inscrito en la tabla
  db_set_active('eSM');
    $jugador = db_fetch_array(db_query('SELECT {id_Jugador} FROM {Jugador} WHERE {id_Modalidad_Juego_Temporada} = %d AND {uid} = %d', $node->id_Modalidad_Juego_Temporada, $user->uid));
  db_set_active('default');
  if(is_array($jugador)) {
    //Actualizamos el estado del jugador a TIENE_EQUIPO
    db_set_active('eSM');
      db_query('UPDATE {Jugador} SET Estado = %d
               WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d',
               TIENE_EQUIPO, $user->uid, $node->id_Modalidad_Juego_Temporada);
    db_set_active('default');
  }
  else {
    db_set_active('eSM');
      db_query("INSERT INTO {Jugador} (id_Modalidad_Juego_Temporada, uid, Fecha_Registro, Estado)
               VALUES ( %d, %d, %d, %d )",
               $node->id_Modalidad_Juego_Temporada, $user->uid, string_to_timestamp( date( 'Y-m-d' ) ), TIENE_EQUIPO );
      $jugador = db_fetch_array(db_query('SELECT {id_Jugador} FROM {Jugador} WHERE {id_Modalidad_Juego_Temporada} = %d AND {uid} = %d', $node->id_Modalidad_Juego_Temporada, $user->uid));
    db_set_active('default');
  }
  
  //2.- Introduce los datos en la tabla de equipos e integrantes equipos
	db_set_active ( 'eSM' );
	  db_query("INSERT INTO {Equipo} (nid_Equipo, id_Modalidad_Juego_Temporada, Abreviacion)
             VALUES (%d, %d, '%s')",
             $node->nid, $node->id_Modalidad_Juego_Temporada, $node->abreviacion);
    db_query('INSERT INTO {Integrantes_Equipo} (nid_Equipo, id_Jugador, Estado) VALUES ( %d, %d, %d)', $node->nid, $jugador[ 'id_Jugador' ], ACEPTADO);
  db_set_active ('default');
  
  //3.- Si el módulo de ránking se encuentra activo creamos la entrada del equipo en la tabla de puntuación
  if(module_exists('ranking')) {
    db_set_active('eSM');
      db_query("INSERT INTO { Puntuacion }  ( nid_Equipo ) VALUES ( %d );", $node->nid );
    db_set_active('default');
  }
}

/**
 * Función para verificar que el usuario no esté dado de alta como jugador de otro equipo antes de crear el suyo propio.
 */
function team_validate($node, $form) {
	global $user;
	$tiene_equipo = tiene_equipo($user->uid, $node->id_Modalidad_Juego_Temporada);
	
	//Verifica si el jugador es un agente libre o no está registrado
	if ($tiene_equipo == TIENE_EQUIPO) {
    form_set_error('id_Modalidad_Juego_Temporada', 'No puedes crear un equipo para esta modalidad porque ya perteneces a otro.</br>Abandona tu equipo actual para poder crear otro.');
	}
}
/**
 * Implementación del hook_node_load()
 */
function team_load($node){
	db_set_active ( 'eSM' );
		$team = db_fetch_array(db_query('SELECT {Abreviacion}, {id_Modalidad_Juego_Temporada} FROM {Equipo} WHERE {nid_Equipo} = %d', $node->nid ));
		$team_i = db_query('SELECT * FROM {Integrantes_Equipo} WHERE {nid_Equipo} = %d AND {Estado} = %d', $node->nid, ACEPTADO );
		$team_puntuacion = db_fetch_object(db_query('SELECT * FROM {Puntuacion} WHERE {nid_Equipo} = %d', $node->nid )); 
	db_set_active ( 'default' );

	$node->abreviacion = $team['Abreviacion'];		//Agrega la abreviación al nodo equipo
	$node->id_Modalidad_Juego_Temporada = $team['id_Modalidad_Juego_Temporada'];	//Agrega al nodo equipo el id_Modalidad_Juego_Temporada al que pertenece el equipo
	
	//Cuenta cuantos integrantes tiene el equipo y lo agrega al objeto nodo
	$no_integrantes = 0;
	$integrantes = array( );
	
	while ($jugador = db_fetch_object($team_i)) {
    db_set_active('eSM');
        $jugador = db_fetch_object(db_query('SELECT * FROM {Jugador} WHERE id_Jugador = %d', $jugador->id_Jugador));
    db_set_active('default');
    
    $integrantes[ $jugador->id_Jugador ] = $jugador;
		$no_integrantes++;
	}
	$node->Numero_Integrantes = $no_integrantes;
  $node->Integrantes = $integrantes;

  $node->Racha = $team_puntuacion->Racha;
    
  if($team_puntuacion->PJ > 0)
      $node->Victorias = $team_puntuacion->PG / $team_puntuacion->PJ;
  else
      $node->Victorias = 0;
}
/**
 * Implementación del hook_node_delete()
 */
function team_delete($node){
	//Marcar el equipo como eliminado (Estado = 4)
	db_set_active('eSM');
		db_query('UPDATE {Equipo} SET Estado = %d WHERE nid_Equipo = %d', ELIMINADO, $node->nid);
	db_set_active('default');
	
	//Regresar a todos los jugadores a estado de NO_REGISTRADO
	$plantilla = _team_get_plantilla($node->nid);
	
	while ($jugador = db_fetch_object($plantilla)) {
		db_set_active('eSM');
			db_query('UPDATE {Jugador} SET Estado = %d WHERE id_Jugador = %d', NO_REGISTRADO, $jugador->id_Jugador);
		db_set_active('default');
	}
}
/**
 * Implementación del hook_block()
 */
function team_block( $op = 'list', $delta = 0, $edit = array()) {
  //Evita que el block con id no. 0 sea cacehable
  $block[0]['cache'] = BLOCK_NO_CACHE;
  $block[3]['cache'] = BLOCK_NO_CACHE;
  $block[4]['cache'] = BLOCK_NO_CACHE;
 
  switch( $op ) {
    case 'list':
      $block = array();
      $block[ 0 ][ 'info' ] = t('Inscribirse a las modalidades.');
      $block[ 1 ][ 'info' ] = t('Juegos en los que participa.');
      $block[ 2 ][ 'info' ] = t('Plantilla del equipo.');
      $block[ 3 ][ 'info' ] = t('Logo de equipo.');
      $block[ 4 ][ 'info' ] = t('Capitan del equipo.');
      $block[ 5 ][ 'info' ] = t('Acciones del equipo.');
      return $block;

    case 'configure':
      if (module_exists('imagecache') && function_exists('imagecache_presets')) {
        // Get all the imagecache presets on the site.
        $options = array('' => '');
        $presets = imagecache_presets();
        foreach ($presets AS $preset) {
          $options[$preset['presetname']] = $preset['presetname'];
        }
        
        switch ($delta) {
          case 2:
            // Allow the user to choose a preset to use on roster block.
            $form['team_block_roster_picture_preset'] = array(
              '#type' => 'select',
              '#title' => t('User picture preset'),
              '#options' => $options,
              '#description' => t('Imagecache preset to use for the team picture on this block. Leave blank to not use this feature.'),
              '#default_value' => variable_get('team_block_roster_picture_preset', ''),
            );
            break;
          case 3:
            // Allow the user to choose a preset to use on team image block.
            $form['team_block_team_picture_preset'] = array(
              '#type' => 'select',
              '#title' => t('Team picture preset'),
              '#options' => $options,
              '#description' => t('Imagecache preset to use for the user picture on roster block. Leave blank to not use this feature.'),
              '#default_value' => variable_get('team_block_team_picture_preset', ''),
            );
            break;
        }
      }
        
      return $form;
    
    case 'save':
      switch ($delta) {
        case 2:
          variable_set('team_block_roster_picture_preset', $edit['team_block_roster_picture_preset']);
          return;
        
        case 3:
          variable_set('team_block_team_picture_preset', $edit['team_block_team_picture_preset']);
          return;
      }
      
    case 'view':
      switch( $delta ) {
        case 0:
          $block = array();
          $block['subject'] = t('Battlearena');
          $block['content'] = team_links_get_block();
          return $block;
        
        case 1:
          $block = array();
          $block['subject'] = t('Juegos en los que participa');
          $block['content'] = team_active_games_block();
          return $block;
          
        case 2:
          $block = array();
          $block['subject'] = t('Team Roster');
          $block['content'] = team_roster_get_block();
          return $block;
        
        case 3:
          $block = array();
          $block['subject'] = t('Team Logo');
          $block['content'] = team_pane_get_block();
          return $block;
        
        case 4:
          $block = array();
          $block['subject'] = t('Team Capitan');
          $block['content'] = team_capitan_get_block();
          return $block;
        
        case 5:
          $block = array();
          $block['subject'] = t('Team Actions');
          $block['content'] = team_actions_get_block();
          return $block;
      }
      break;
  }
}
/**
 * Función para decidir si el usuario tiene accseso a las pestañas de administración del equipo
 * dependiendo de si es el capitán del equipo y si es un equipo formado por más de una persona
 *
 * También controla el acceso a los formularios de Aceptar/Rechazar invitaciones de equipo
 */
function team_admin_access($node) {
  module_load_include( 'php', 'base_datos_externa', 'db_functions' );
  global $user;
  $context = arg(2);
  $area = arg(0);
  
  //Verifica si estamos viendo un perfil de usuario y si el usuario es el propietario
  if ($area == 'user') {
    if(is_numeric(arg(1)) && $user->uid == arg(1))
      return TRUE;
    
    if($context == 'invite')
      return TRUE;
  }
  
  //Si estamos viendo un nodo de tipo equipo
  if ($area = 'node') {
    if (!($node->type == 'team'))
      return FALSE;
    
    switch ($context) {
      case 'join':
        //Un jugador quiere aceptar la invitación
        //Verifica que el jugador no esté registrado en otro equipo
        db_set_active('eSM');
          $jugador = db_fetch_object(db_query('SELECT * FROM {Jugador}
                                              WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d',
                                              $user->uid, $node->nid));
        db_set_active('default');
        if ($jugador->Estado <> TIENE_EQUIPO)
          return TRUE;
        else
          return FALSE;
        
      case 'drop':
        //Un jugador quiere abandonar un equipo
        //Verifica que no sea el capitán
        if ($node->uid == $user->uid)
          return FALSE;
        else
          return TRUE;
        
      case 'decline':
        //Un jugador quiere rechazar una invitación
        //Verifica que el usuario tenga una invitación al equipo
        db_set_active('eSM');
          $invitacion = db_fetch_object(db_query('SELECT * FROM {Integrantes_Equipo} AS ie
                                                 INNER JOIN {Jugador} AS j ON ie.id_Jugador = j.id_Jugador
                                                 WHERE nid_Equipo = %d and uid = %d',
                                                 $node->nid, $user->uid));
        db_set_active('default');
        if($invitacion->Estado == INVITADO)
          return TRUE;
        else
          return FALSE;
      
      case 'request':
        //Un jugador quiere solicitar unirse a un equipo
        //devolvemos TRUE y dejámos que sea la forma de request
        //sea la que haga la función de validación
        return TRUE;
    }
    //si el usuario que está viendo la forma es el capitán del equipo y el equipo está activo.
    $modalidad = get_modalidad_juego_temporada($node->id_Modalidad_Juego_Temporada);
    if (($modalidad->Maximo_Jugadores > 1) && ($node->uid == $user->uid)) {
      //Obtiene el estado del equipo para ver si está activo
      db_set_active('eSM');
        $team = db_fetch_object(db_query('SELECT * FROM {Equipo} WHERE nid_Equipo = %d', $node->nid));
      db_set_active('default');
      
      if ($team->Estado == ACTIVO)
        return TRUE;
    }
  }	
	return FALSE;
}
/**
 * Implementation of hook_rules_event_info().
 * Usado para:
 * 		- notificar a los capitanes de las solicitudes de inscripción a su equipo, cuando un jugador decide salirse de su equipo
 * 		- notificar a los usuarios de cuando los invitan a un equipo o rechazan sus solicitudes
 * @ingroup rules
 */
function team_rules_event_info() {
  return array(
    'solicitud_usuario' => array(
      'label' => t('UserA ha solicitado entrar al equipo de userB'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, el que ha solicitado unirse al equipo de userB.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, capitan del equipo al que UserA desea unirse.')),
        'team' => array('type' => 'node', 'label' => t('Equipo al que userA quiere unirse.')),
      ),
    ),
    'usuario_aceptado' => array(
      'label' => t('UserA ha aceptado a userB como parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que a aceptado a userB en su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido aceptado en el equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo en el que UserB ha sido aceptado.')),
      ),
    ),
    'usuario_expulsado' => array(
      'label' => t('UserA ha expulsado a userB de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que a expulsado a userB de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido expulsado del equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo del que UserB ha sido expulsado.')),
      ),
    ),
    'usuario_rechazado' => array(
      'label' => t('UserA ha rechazado la soclicitud de userB de formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha rechazado la solicitud de userB de formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, usuario que ha sido rechazado por UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo del que UserB ha sido rechazado.')),
      ),
    ),
    'usuario_invitado' => array(
      'label' => t('UserA ha invitado a userB a formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha invitado a userB a formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que ha sido invitado al equipo de UserA.')),
        'team' => array('type' => 'node', 'label' => t('Equipo al que UserB ha sido invitado.')),
      ),
    ),
    'invitacion_aceptada' => array(
      'label' => t('UserA ha aceptado la invitacion de formar parte del equipo de userB'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha aceptado la solicitud de userB de formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que habia invitado a UserA.')),
		'team' => array('type' => 'node', 'label' => t('Equipo en el que UserB ha aceptado participar.')),
      ),
    ),
    'invitacion_rechazada' => array(
      'label' => t('UserA ha rechazado la invitacion de userB de formar parte de su equipo'),
      'module' => 'Team',
      'arguments' => array(
        'userA' => array('type' => 'user', 'label' => t('UserA, que ha rechazado la invitacion de userB para formar parte de su equipo.')),
        'userB' => array('type' => 'user', 'label' => t('UserB, que habia invitado a UserA a su equipo.')),
		'team' => array('type' => 'node', 'label' => t('Equipo al que UserA había sido invitado.')),
      ),
    ),
  );
}
/**
 * Función que permite conocer el estado de un jugador para una modalidad
 * Recibe el uid del jugador que se quiere revisar
 * y el id_Modalidad_Juego_Temporada para el cual se quiere hacer la evaluación
 * Devuelve:
 * 0 - si el jugador no está inscrito
 * 1 - si el jugador es agente libre
 * 2 - si el jugador tiene equipo
 */
function tiene_equipo($uid, $id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$query = db_query('SELECT {Estado} FROM {Jugador}
				  WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d',
				  $uid, $id_Modalidad_Juego_Temporada);
	db_set_active('default');
	
	while ($result = db_fetch_array($query)) {
	  if ($result['Estado'] == AGENTE_LIBRE) 
      return AGENTE_LIBRE;
	    
	  if ($result['Estado'] == TIENE_EQUIPO) 
      return TIENE_EQUIPO;  
	}
    
	return NO_REGISTRADO;
}
/**
 * Función para obtener los datos de un jugador
 * recibe el uid del jugador y el id_Modalidad_Juego_Temporada en el que buscar
 * devuelve un objeto con los datos del jugador o NULL si no encuentra
 */
function get_jugador($uid, $id_Modalidad_Juego_Temporad) {
    db_set_active('eSM');
        $jugador = db_fetch_object(db_query('SELECT * FROM {Jugador} WHERE uid = %d AND id_Modalidad_Juego_Temporada = %d', $uid, $id_Modalidad_Juego_Temporad));
    db_set_active('default');
    
    return $jugador;
}
/**
 * función para obtener los equipos inscritos
 * en una modalidad de la temporada activa
 * recibe el id_Modalidad_Juego_Temporada
 * devuelve el resultado de la consulta para que
 * se pueda procesar con db_fetch_object
 * o db_fetch_array
 */
function get_teams($id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$teams = db_query('SELECT * FROM {Equipo} AS e INNER JOIN {Puntuacion} AS p ON e.nid_Equipo = p.nid_Equipo
				  WHERE {id_Modalidad_Juego_Temporada} = %d AND Estado = %d
				  ORDER BY Puntuacion DESC',
				  $id_Modalidad_Juego_Temporada, ACTIVO);
	db_set_active('default');
	
	return $teams;
}
/**
 * Implementación del hoock theme
 */
function team_theme() {
    return array (
        'lista_agentes_libres' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/lista_agentes_libres.inc',
        ),
        'team_inscripcion' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_inscripcion.inc',
        ),
        'user_invitaciones' => array (
            'arguments' => array ('form' => NULL),
            'file' => 'erca/theme/user_invitaciones.inc',
        ),
        'team_active' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_active.inc',
        ),
        'team_solicitudes' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/team_solicitudes.inc',
        ),
        'team_pane' => array(
            'template' => 'team_pane',
            'arguments' => array(
              'team' => NULL,
              'picture_preset' => NULL,
            ),
        ),
        'team_info' => array(
            'template' => 'team_info',
            'arguments' => array(
              'modalidad' => NULL,
              'team' => NULL,
              'ranking' => NULL,
              'division' => NULL,
              'calificacion' => NULL,
            ),
        ),
    );
}
/**
 * Función para obtener la plantilla de un equipo
 */
function _team_get_plantilla($nid_Equipo) {
  db_set_active( 'eSM' );  //Carga todos los jugadores activos en el equipo.
    $jugadores = db_query ('SELECT * FROM { Jugador } AS j
                           INNER JOIN { Integrantes_Equipo } AS ie ON j.{ id_Jugador } = ie.{ id_Jugador }
                           INNER JOIN { Equipo } AS e ON ie.{ nid_Equipo } = e.{ nid_Equipo }
                           WHERE e.{ nid_Equipo } = %d AND ie.{ Estado } = %d',
                           $nid_Equipo, ACEPTADO);
  db_set_active('default');
  
  return $jugadores;
}
/**
 * Función para determinar si un usuario es capitán de un equipo determinado
 *
 * @param
 *      $uid - El uid del usuario a verificar
 *      $nid_Equipo - el nid del Equipo a verificar
 *
 * @return
 *      TRUE - Si el usuario es el capitán del equipo
 *      FALSE - Si el usuario no es capitán del equipo
 */
function team_user_is_team_capitan($uid, $nid_Equipo) {
    $equipo = db_fetch_object(db_query('SELECT * FROM {node} WHERE nid = %d', $nid_Equipo));
    
    if ($equipo->uid == $uid)
        return TRUE;
    else
        return FALSE;
}
/**
 * Función para obtener el equipo al que pertenece un usaurio en una modaldiad
 *
 * @param
 * 	$uid
 * 	$id_Modalidad_Juego_Temporada
 *
 * @return
 * 	object con los datos del equipo
 */
function _team_get_user_team_modalidad ($uid, $id_Modalidad_Juego_Temporada) {
	db_set_active('eSM');
		$equipo = db_fetch_array(db_query('SELECT e.nid_Equipo FROM {Equipo} AS e
										  INNER JOIN {Integrantes_Equipo} AS ie ON e.nid_Equipo = ie.nid_Equipo
										  INNER JOIN {Jugador} AS j ON ie.id_Jugador = j.id_Jugador
										  WHERE e.id_Modalidad_Juego_Temporada = %d AND uid = %d',
										  $id_Modalidad_Juego_Temporada, $uid));
	db_set_active('default');
	
	return node_load(array('nid' => $equipo['nid_Equipo']));
}
/**
 * Creates the contents of the team logo block. Called from team_block().
 */
function team_pane_get_block() {
  $area = arg(0);
  $context = NULL;

  // Check that we're in the right area. The block only works on the user pages,
  // node full view pages, and the blog listing pages. It also does not work on
  // the "edit" subpath.
  if (!($area == 'node') || !is_numeric(arg(1)) || arg(2) == 'edit') {
    return;
  }
  
  //Load the node
  $team = node_load(array('nid' => arg(1)));
  
  if (!($team->type == 'team')) {
    return;
  }

  // Build the author pane
  $team_pane = theme('team_pane', $team, variable_get('team_block_team_picture_preset', ''));
  
  return $team_pane;
}
/**
 * Preprocesses template variables for the team pane picture template.
 *
 * Available variables (All optional except 'team'):
 * $variables['team']: Team node account object.
 * $variables['picture_preset']: Imagecache preset to use to format the
 *    user picture.
 */
function template_preprocess_team_pane(&$variables) {
  $variables['picture'] = '';
  $team = $variables['team'];

  // Get the imagecache preset, if any.
  $preset = (!empty($variables['picture_preset'])) ? $variables['picture_preset'] : '';

  // If team pictures are enabled...
  module_load_include('inc', 'content', 'includes/content.crud');
  // Check for filefields on teams.
  $instances = content_field_instance_read(array('field_name' => 'field_logo', 'type_name' => 'team'));
  $field_check = (bool) count($instances);
  
  if ($field_check) {
    // Get the team's logo if they have one or the default picture if exists.
    if (module_exists('imagecache') && (isset($team->field_logo) && file_exists($team->{field_logo}[0]['filepath']))) {
      // We only want to get the full URL if not using imagecache.
      //$picture = (!empty($preset) && module_exists('imagecache')) ? $team->field_logo[0] : file_create_url($team->field_logo);
      $picture = $team->{field_logo}[0]['filepath'];
    }
    else {
      $field = content_fields('field_logo', 'team');
      $picture = $field['widget']['default_image']['filepath'];
    }
    
    // If we have a picture...
    if (isset($picture)) {
      // If there's a preset set and imagecache is enabled...
      if (!empty($preset) && module_exists('imagecache')) {
        // Toss the picture over to imagecache for sizing
        $alt = t("@team's logo", array('@user' => $team->title));
        $variables['picture'] = theme('imagecache', $preset, $picture, $alt, $alt);
        $variables['imagecache_used'] = TRUE;
      }
      else {
        // Just run the picture through theme_image. Note that we don't link
        // the picture here since it doesn't make sense for many uses of AP.
        // If the picture needs to be linked, it can be done in the template.
        $alt = t("@team's logo", array('@user' => $team->title));
        $variables['picture'] = theme('image', $picture, $alt, $alt, '', FALSE);
        $variables['imagecache_used'] = FALSE;
      }
    }
  }
}
/**
 * Creates the contents of the team roster block. Called from team_block().
 */
function team_roster_get_block() {
  $area = arg(0);
  $preset = variable_get('team_block_roster_picture_preset', '');
  
  // Check that we're in the right area. The block only works on the user pages,
  // node full view pages, and the blog listing pages. It also does not work on
  // the "edit" subpath.
  if (!($area == 'node') || !is_numeric(arg(1)) || arg(2) == 'edit') {
    return;
  }
  
  // If user pictures are enabled...
  if (variable_get('user_pictures', 0)) {
    //Obtiene los datos del equipo y su plantilla
    $team_id = arg(1);
    $plantilla = _team_get_plantilla($team_id);
    
    while ($jugador = db_fetch_object($plantilla)) {
      $account = user_load( array( 'uid' => $jugador->uid ) );
      // Get the user's avatar if they have one or the default picture if exists.
      if (!empty($account->picture) && file_exists($account->picture)) {
        // We only want to get the full URL if not using imagecache.
        $picture = (!empty($preset) && module_exists('imagecache')) ? $account->picture : file_create_url($account->picture);
      }
      elseif (variable_get('user_picture_default', '')) {
        $picture = variable_get('user_picture_default', '');
      }
      // If there's a preset set and imagecache is enabled...
      if (!empty($preset) && module_exists('imagecache')) {
        $content[] = l( theme('imagecache', $preset, $picture, $account->name, $account->name ) . '<span>'. $account->name . '</span>',  'user/'.$account->uid, array('html'=>TRUE) );
      }
      else {
        $content[] = l( theme('image', $picture, $account->name, $account->name ) . '<span>'. $account->name . '</span>', 'user/'.$account->uid, array('html'=>TRUE) );
      }
    }
    return theme('menu_tree', theme('item_list', $content));
  }
  else {
    return t('User images are not allowed');
  }
}
/**
 * Creates the contents of the team roster block. Called from team_block().
 */
function team_capitan_get_block() {
  $area = arg(0);
  $preset = variable_get('team_block_roster_picture_preset', '');
  
  // Check that we're in the right area. The block only works on the user pages,
  // node full view pages, and the blog listing pages. It also does not work on
  // the "edit" subpath.
  if (!($area == 'node') || !is_numeric(arg(1)) || arg(2) == 'edit') {
    return;
  }
  
  //Load the node
  $team = node_load(array('nid' => arg(1)));
  
  if (!($team->type == 'team')) {
    return;
  }
  
  // If user pictures are enabled...
  if (variable_get('user_pictures', 0)) {
    //Obtiene los datos del capitán del equipo
    $team_id = arg(1);
    $team = node_load(array('nid' => $team_id));
    $account = user_load( array( 'uid' => $team->uid ) );
    
    // Get the user's avatar if they have one or the default picture if exists.
    if (!empty($account->picture) && file_exists($account->picture)) {
      // We only want to get the full URL if not using imagecache.
      $picture = (!empty($preset) && module_exists('imagecache')) ? $account->picture : file_create_url($account->picture);
    }
    elseif (variable_get('user_picture_default', '')) {
      $picture = variable_get('user_picture_default', '');
    }
    // If there's a preset set and imagecache is enabled...
    if (!empty($preset) && module_exists('imagecache')) {
      $content = '<div id="team_capitan">'. l( theme('imagecache', $preset, $picture, $account->name, $account->name ) . '<span>'. $account->name . '</span>',  'user/'.$account->uid, array('html'=>TRUE) ) . '</div>';
    }
    else {
      $content = '<div id="team_capitan">'. l( theme('image', $picture, $account->name, $account->name ) . '<span>'. $account->name . '</span>', 'user/'.$account->uid, array('html'=>TRUE) ) . '</div>';
    }
    return $content;
  }
  else {
    return t('User images are not allowed');
  }
}
/**
 * Creates the contents of block games on user/team participate
 */
function team_active_games_block() {
  $area = arg(0);

  // Check that we're in the right area. The block only works on the user pages,
  // node full view pages, only if node view is 'team' type.
  //It also does not work on the "edit" subpath.
  if (!($area == 'user' || $area == 'node') || !is_numeric(arg(1)) || arg(2) == 'edit') {
    return;
  }

  if ($area == 'user') {
    // On the user page or the user's blog listing. Get the UID from the URL.
    $uid = arg(1);
    
    //Obtiene todos los equipos activos en los que el jugador está registrado
    db_set_active('eSM');
      $teams = db_query('SELECT e.nid_Equipo, e.id_Modalidad_Juego_Temporada FROM {Equipo} AS e
                        INNER JOIN {Integrantes_Equipo} AS ie ON e.nid_Equipo = ie.nid_Equipo
                        INNER JOIN {Jugador} AS j ON ie.id_Jugador = j.id_Jugador
                        WHERE j.uid = %d AND e.Estado = %d',
                        $uid, ACTIVO);
    db_set_active('default');
  }
  else {
    // We're on a node page so load the node.
    $node = $node = menu_get_object();

    if (!($node->type == 'team')) {
      // Not a type we want to show on.
      return;
    }
    
    //Obtiene todas las modalidades en que el equipo está activo
    db_set_active('eSM');
      $teams = db_query('SELECT nid_Equipo, id_Modalidad_Juego_Temporada FROM {Equipo} AS e
                        WHERE e.nid_Equipo = %d AND e.Estado = %d',
                        $node->nid, ACTIVO);
    db_set_active('default');
  }
  
  while ($team = db_fetch_object($teams)) {
    //Obitne el tid de la modalidad
    db_set_active('eSM');
      $modalidad = db_fetch_object(db_query('SELECT * FROM {Modalidad_Juego} AS mj
                                            INNER JOIN {Modalidad_Juego_Temporada} AS mjt ON mj.id_Modalidad_Juego = mjt.id_Modalidad_Juego
                                            WHERE id_Modalidad_Juego_Temporada = %d', $team->id_Modalidad_Juego_Temporada));
    db_set_active('default');
  
    //Obtiene el ránking del equipo
    $ranking = ranking_get_ranking_equipo($team->nid_Equipo, $team->id_Modalidad_Juego_Temporada);
    
    //Obtiene la división a la que pertenece un equipo
    $division = ranking_get_division_equipo($ranking);
    
    //Si el módulo match está activo obitne la calificación del equipo
    if (module_exists('match')) {
      $calificacion = _match_display_reputation($team->nid_Equipo);
    }
    
    //Obtiene el nodo del equipo
    $team = node_load(array('nid' => $team->nid_Equipo));
    
    //Produce la salida del panel de equipo
    $content[] = theme('team_info', $modalidad, $team, $ranking, $division, $calificacion);
  }
    
  return theme('item_list', $content, '', 'ul', 'team_info');
}
/**
 * Función para crear el bloque de inscripción a las modalidades
 */
function team_links_get_block() {
  $area = arg(0);

  // Check that we're in the right area. 
  if (!($area == 'taxonomy') && !is_numeric(arg(2))) {
    return;
  }
  $tid = arg(2);

  if ( is_object( $modalidad = term_is_active( $tid )) ) {
      $content[] = l( t( 'Create Team' ), 'taxonomy/term/'. $tid .'/team/register', array('attributes'=>array('class' => 'create_team')));
      //$content[] = l( t( 'Create Team' ), 'taxonomy/term/'. $tid .'/team/register', array('attributes'=>array('class' => 'popups create_team')));
      if ($modalidad->Maximo_Jugadores > 1) {
        $content[] = l( t( 'Look for Team' ), 'taxonomy/term/'. $tid . '/free_agent/register', array('attributes'=>array('class' => 'popups look_team')));
      }
      
      return theme('menu_tree', theme('item_list', $content));
  }
}
/**
 * Función para desplegar la lista de agentes libres
 * de cada una de las modalidades
 *
 * @arg
 *  $id_Modalidad_Juego_Temporada
 */
function _team_agente_libre_lista($id_Modalidad_Juego_Temporada) {
  //Utilizamos el mismo preset de imagecache que se está usando para desplegar la plantilla
  //en caso de querer cambiarlo debería de agregarse la opción en la pestaña de administración del equipo
  $preset = variable_get('team_block_roster_picture_preset', '');
  
  //Sabemos si el que está viendo la lista es capitán o no para mostrar los links de invitación
  global $user;
  $is_capitan = is_capitan($user->uid, $id_Modalidad_Juego_Temporada);
  
  //Obtiene la lista de jugadores libres para una modalidad y temporada
  db_set_active( 'eSM' );
      $result = db_query( "SELECT { id_Jugador }, { uid } FROM { Jugador } WHERE id_Modalidad_Juego_Temporada = %d AND Estado = %d", $id_Modalidad_Juego_Temporada, AGENTE_LIBRE );
  db_set_active( 'default' );
  
  $count = 0;
  
  while ( $jugador = db_fetch_array( $result ) ) {
      ++ $count;
      $row = array();
      //Obtiene los datos del jugador
      db_set_active('eSM');
          $descripcion = db_fetch_array(db_query('SELECT {Descripcion} FROM {Agente_Libre} WHERE id_Jugador = %d', $jugador['id_Jugador']));
          $disponibilidad_dias = db_fetch_array(db_query('SELECT * FROM {Disponibilidad_Dias} WHERE id_Jugador = %d', $jugador['id_Jugador']));
          $disponibilidad_horas = db_fetch_array(db_query('SELECT * FROM {Disponibilidad_Horas} WHERE id_Jugador = %d', $jugador['id_Jugador']));
      db_set_active('default');
      
      //TODO: Revisar la conveniencia de añadir al objeto user los datos del jugador para que sea más sencillo de manejar y menos consultas que realizar.
      $jugador = user_load($jugador['uid']);
      
      // If user pictures are enabled...
      if (variable_get('user_pictures', 0)) {
          // Get the user's avatar if they have one or the default picture if exists.
          if (!empty($jugador->picture) && file_exists($jugador->picture)) {
            // We only want to get the full URL if not using imagecache.
            $picture = (!empty($preset) && module_exists('imagecache')) ? $jugador->picture : file_create_url($jugador->picture);
          }
          elseif (variable_get('user_picture_default', '')) {
            $picture = variable_get('user_picture_default', '');
          }
          // If there's a preset set and imagecache is enabled...
          if (!empty($preset) && module_exists('imagecache')) {
            $row['Imagen'] = theme('imagecache', $preset, $picture, $jugador->name, $jugador->name);
          }
          else {
            $row['Imagen'] = theme('image', $picture, $jugador->name, $jugador->name);
          }
      }
      $row['Nombre'] = l($jugador->name, 'user/'. $jugador->uid);
      $row['Descripcion'] = $descripcion['Descripcion'];
      
      foreach ($disponibilidad_dias as $dia => $valor) {
          if ($valor == 1) {
              $row['Dias'] .= substr($dia, 0, 2). ' / ';
          }
      }
      
      $horas = '';
      foreach ($disponibilidad_horas as $key => $valor) {
          if ($valor == 1)
              $horas .= $key .' and ';
      }
      if ($horas == 'Morning and Evening and Night and ')
          $horas = t('Always');
          
      if (substr($horas,-5) == ' and ')
          $horas = substr($horas, 0, -5);
  
      $row['Horas'] = $horas;
      
      if (isset($is_capitan)) {
          $row['link'] = l('Invitar', 'user/'. $jugador->uid . '/invite/'. $is_capitan->nid, array('attributes'=>array('class' => 'popups')));
      }
      $rows[] = $row;
  }
  
  if($count > 0) {
    $header = array(t('Imagen'), t('Jugador'), t('Presentacion'), t('Dias'), t('Horarios'), t(' ')) ;
    return theme('table', $header, $rows);
  }
  
  return;
}
/**
 * Función para construir el bloque de acciones de equipo
 */
function team_actions_get_block() {
  $area = arg(0);
  $nid = arg(1);

  // Check that we're in the right area. 
  if (!($area == 'node'))
    return;
  
  $node = node_load(array('nid' => $nid));
  if (!($node->type == 'team'))
    return;
  
  $modalidad = get_modalidad($node->id_Modalidad_Juego_Temporada);
  if($modalidad->Minimo_Jugadores > 1)
    $content[] = l( t( 'Request Join' ), 'node/'. $nid .'/request', array('attributes'=>array('class' => 'popups')));
  if(module_exists('flag')) 
    $content[] = flag_create_link('follow_team', $nid);
  
  return theme('menu_tree', theme('item_list', $content));
}