<?php
/**
 * Módulo para controlar la funcionalidad de los torneos
 */

/**
 * Definición de constantes
 */
  //Define los tipos de torneos que puede haber
  define (MASTER_CUP, 2);
  define (MINI_CUP, 1);
  define (FUN_CUP, 0);
  //Define las constantes para diferenciar simple y doble eliminación
  define (ELIMINACION_SIMPLE, 0);
  define (ELIMINACION_DOBLE, 1);
  //Define los tipos de estado en los que puede permanecer un torneo
  define (FUTURO, 0);	//El torneo todavía no empieza
  define (PRESENTE, 1);	//El torneo se está jugando en estos momentos
  define (PASADO, 2);	//El torneo ya ha terminado
/**
 * Implementación del hook help
 */
function torneo_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#torneo":
      $output = '<p>'.  t("Permite administrarlos torneos.") .'</p>';
      break;
  }
  return $output;
} // function event_manager_help
/**
 * Implementación del hook perm
 */
function torneo_perm() {
  return array ('administrar torneos', 'ver torneos', 'administrar resultados');
}
/**
 * Implementación del hook menú
 */
function torneo_menu() {
  $items = array();
  
  $items['node/%node/eliminatorias'] = array(
    'title' => 'Eliminatorias',
    'page callback' => 'torneo_eliminatorias',
    'page arguments' => array(1),
	'access callback' => '_torneo_menu_access',
    'access arguments' => array(1, 'ver torneos'),
    'type' => MENU_LOCAL_TASK,
    //'weight' => 20,
    'file' => 'inc/eliminatorias.inc',
  );
  if (module_exists('match')) {
		$items['node/%node/resultados'] = array(
		  'title' => 'Resultados',
		  'page callback' => 'drupal_get_form',
		  'page arguments' => array('torneo_resultados'),
		  'access callback' => '_torneo_menu_access',
		  'access arguments' => array(1, 'ver torneos'),
		  'type' => MENU_LOCAL_TASK,
		  'weight' => -5,
		  'file' => 'inc/resultados.inc',
		);
  }
  $items['node/%node/participantes'] = array(
    'title' => 'Participantes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('torneo_participantes'),
	'access callback' => '_torneo_menu_access',
    'access arguments' => array(1, 'ver torneos'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'inc/participantes.inc',
  );
  $items['node/%node/admin'] = array(
    'title' => 'Administrar',
    'page callback' => 'torneo_admin',
    'page arguments' => array(1),
	'access callback' => '_torneo_menu_access',
    'access arguments' => array(1, 'administrar torneos', 'administrar resultados'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['node/%node/admin/settings'] = array(
    'title' => t('Basic Settings'),
    'page callback' => 'torneo_admin_settings_page',
    'page arguments' => array(1),
	'access callback' => '_torneo_menu_access',
    'access arguments' => array(1, 'administrar torneos'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
	'file' => 'inc/admin_settings.inc',
  );
  $items['node/%node/admin/resultados'] = array(
    'title' => 'Administrar Resultados',
    'page callback' => 'torneo_admin_results',
    'page arguments' => array(1),
	'access callback' => '_torneo_menu_access',
    'access arguments' => array(1, 'administrar resultados'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
	'file' => 'inc/admin_results.inc',
  );
  
  return $items;
}
/**
 * _torneo_menu_access: Función para definir el acceso a los menús de torneo
 * primero tiene que checar si el nodo tiene habilitadas las inscripciones
 * después tiene que checar que el usuario tenga permiso de acceder a las ventas
 * @param
 * 		$node un nodo completo cargado y proporcionado por el hook menu
 * 		$menu_type el tipo de menú al que se esta intentando accesar
 *
 * 	@return
 * 		TRUE si el nodo que se está visualizando tiene habilitadas las incripciones
 * 		y el usuario tiene permiso de acceder al menú que se está solicitando
 *
 * 		FALSE si el nodo no tiene habilitadas inscripciones o el usuario no tiene permiso
 */
function _torneo_menu_access($node, $menu_type = 'node') {
  global $user;

  // If the node isn't signup enabled, immediately return failure.
  if (empty($node->signup)) {
    return FALSE;
  }
  // For certain menu types, invoke a hook to allow other modules to alter the
  // access behavior for signup menu items. Just relying on hook_menu_alter()
  // for this won't work, since there are places outside of the menu system,
  // where we call this function to decide if a user should have access to
  // something. If multiple modules return a value, the logical OR is used, so
  // if anyone returns TRUE, access is granted.
  if (in_array($menu_type, array('ver torneos', 'administrar torneos', 'administrar resultados'))) {
    $access_array = module_invoke_all('torneo_menu_access', $node, $menu_type);
    if (!empty($access_array)) {
      // Return TRUE if any values are TRUE, otherwise, FALSE.
      return in_array(TRUE, $access_array);
    }
  }
  // No module returned a value in hook_torneo_menu_access, so continue with
  // the main logic.
  switch ($menu_type) {
    case 'ver torneos':
      // Verifica que el usuario tenga permiso de acceder a los torneos
      return (user_access('ver torneos'));

    case 'administrar torneos':
      //Verifica que el usuario tenga permiso de administrar los torneos
      return user_access('administrar torneos');

    case 'administrar resultados':
      // Verifica que el usario tenga permiso de administrar los resultados
	  // o que tenga permiso de administrar los torneos
      return user_access('administrar torneos') || user_access('administrar resultados');
  }
}
/**
 * Menu callback to handle the default tab at node/N/admin
 *
 * @param $node
 *   Fully loaded node object to generate the node/N/torneo menu handler for.
 *
 * @return
 *   redirect to the tab user have permission.
 */
function torneo_admin($node) {
  if (user_access('administrar torneo')) 
    drupal_goto("node/". $node->nid ."/admin/settings");
  elseif (user_access('administrar resultados'))
    drupal_goto("node/". $node->nid ."/admin/resultados");
  else
	drupal_goto("node/". $node->nid);
}
/**
 * Implementation of hook_cron().
 *
 * Hay dos tareas básica que se llevan a cabo durante la ejecución de cron
 * Realizar el llenado de los brackets de acuerdo a los equipos inscritos y su posición en el ránking 1 hora antes de empezar los partidos
 * Realizar el cierre del torneo 24 horas después de la final para actualizar los puntos y premios de cada uno de los equipos participantes
 * como requieren bastante proceso de datos, cada una de las tareas tiene una función especial para llevarla a cabo
 */
function torneo_cron() {
  module_load_include('inc', 'torneo', 'inc/cron');
  _torneo_init_brackets();
		
  _torneo_ending_event();
}
/**
 * Implementación del hook theme
 */
function torneo_theme () {
    return array (
        'participantes' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/participantes.inc',
        ),
        'torneo_lista_desafios' => array (
            'arguments' => array ('form' => NULL),
            'file' => '/theme/torneo_lista_desafios.inc',
        ),
    );
}
/**
 * Función para obtener las configuraciones de un torneo de la tabla
 * 
 * @param
 * 		nid torneo
 *
 * @return
 * 		objeto settings con todas las características del torneo
 * 		NULL si no está definido el torneo
 */
function get_settings_torneo ($nid) {
  db_set_active('eSM');
	$result = db_fetch_object(db_query('SELECT * FROM {Torneos} WHERE nid_Torneo = %d', $nid));
  db_set_active('default');
  
  return $result;
}
/**
 * Función para obtener el número total de equipos participantes en un torneo
 *
 * @param
 * 		nid_Torneo
 *
 * @return
 * 		número de participantes en número
 */
function torneo_get_total_participantes ($nid_Torneo) {
  db_set_active('eSM');
		$resultado = db_result(db_query("SELECT COUNT(*) FROM {Torneos_Participantes} WHERE nid_Torneo = %d", $nid_Torneo));
  db_set_active('default');
  
  return $resultado;
}
/**
 * Función para obtener el total de filas que ocupa un bracket en la tabla
 *
 * @param
 * 		nid_Torneo
 *
 * 	@return
 * 		número de filas en el bracket
 */
function torneo_get_total_brackets ($nid_Torneo) {
  db_set_active('eSM');
    $resultado = db_result(db_query("SELECT COUNT(*) FROM {Torneos_Brackets} WHERE nid_Torneo = %d", $nid_Torneo));
  db_set_active('default');
  
  return $resultado;
}
/**
 * Función para obtener la información de un equipo en una determinada posición en el bracket
 *
 * @param
 *	$nid_Torneo
 *	$Ronda
 *	$Posicion
 *
 * @return
 * 	array con la información del equipo o nulo si no existe
 */
function _torneo_get_bracket_info ($nid_Torneo, $Ronda, $Posicion) {
  db_set_active('eSM');
		$team_info = db_fetch_array(db_query("SELECT * FROM {Torneos_Brackets} WHERE nid_Torneo = %d AND Ronda = %d AND Posicion = %d", $nid_Torneo, $Ronda, $Posicion));
  db_set_active('default');
  
  return $team_info;
}
/**
 * Función para obtener toda la lista de participantes en un torneo
 * @param
 * 		$nid_Torneo
 * @return
 * 		un db_query con todos los participantes
 */
function torneo_get_participantes($nid_Torneo) {
  db_set_active('eSM');                                                 //Obtiene la lista de participantes
    $participantes = db_query('SELECT * FROM {Torneos_Participantes} WHERE nid_Torneo = %d', $nid_Torneo);
  db_set_active('default');
  
  return $participantes;
}
/**
 * Función para actualizar el estado de un torneo
 * @param
 * 		$nid_Torneo
 * 		Estado a otorgar al torneo
 */
function _torneo_update_estado($nid_Torneo, $estado) {
  db_set_active('eSM');
		db_query('UPDATE {Torneos} SET Estado = %d WHERE nid_Torneo = %d', $estado, $nid_Torneo);
  db_set_active('default');
}
/**
 * Función para actualizar los resultados de un match en la tabla
 * @param
 * 		$nid_Torneo
 * 		$nid_Equipo del equipo a pasar a la siguiente ronda
 */
function _torneo_update_bracket($nid_Torneo, $nid_Equipo) {
  db_set_active('eSM');
		$team = db_fetch_array(db_query("SELECT * FROM {Torneos_Brackets} WHERE nid_Torneo= %d and nid_Equipo = %d ORDER BY Ronda DESC LIMIT 1", $nid_Torneo, $nid_Equipo));
  db_set_active('default');
  
  $newround = $team['Ronda'] + 1;	//Calcula la nueva ronda a la que tiene que ser promovido el equipo
  $newpos = ceil((float)$team['Posicion'] / 2.0 );		//Calcula la nueva posición del equipo en el bracket
  
  db_set_active('eSM');
		db_query("INSERT INTO {Torneos_Brackets} (nid_Torneo, nid_Equipo, Ronda, Posicion)
				 VALUES (%d, %d, %d, %d)",
				 $nid_Torneo, $nid_Equipo, $newround, $newpos);
  db_set_active('default');
  
  //Si el móduo match está activado, manda llamar a la función para crear el match correspondiente
  if (module_exists('match')) {
	_torneo_create_match($nid_Torneo, $nid_Equipo, $newround, $newpos);
  }
}
/**
 * Función para verificar si se puede crear un match
 * @param
 * 	$nid_Torneo
 * 	$nid_Equipo
 * 	$ronda
 * 	$posicion
 * 	
 */
function _torneo_create_match($nid_Torneo, $nid_Equipo, $ronda, $posicion) {
  //Verifica si la posicion es par o impar
  if($posicion&1) { // es impar
	$home_team = _torneo_get_bracket_info($nid_Torneo, $ronda, $posicion);
	$away_team = _torneo_get_bracket_info($nid_Torneo, $ronda, ($posicion + 1));
  }
  else {// es par
	$home_team = _torneo_get_bracket_info($nid_Torneo, $ronda, ($posicion - 1));
	$away_team = _torneo_get_bracket_info($nid_Torneo, $ronda, $posicion);
  }
  
  //Si los dos equipos existen
  if ((is_array($away_team) && is_array($home_team)) && ($home_team['nid_Equipo'] != 1 && $away_team['nid_Equipo'] != 1)) {
	//Obtiene la información del torneo
	db_set_active('eSM');
	  $torneo = db_fetch_object(db_query('SELECT * FROM {Torneos} WHERE nid_Torneo = %d', $nid_Torneo));
	db_set_active('default');
	
	//TODO: Obtener la información del número de rondas de la definición de otro lado
	$numero_rondas = 3;
	
	//Define la fecha del partido
	if ($torneo->Rondas_Dia > 1) {
	  //Define las horas a agregar a la hora de inicio del torneo
	  $dias = 0;
	  
	  while ($ronda > $torneo->Rondas_Dia) {
		$ronda = $ronda - $torneo->Rondas_Dia;
		++$dias;
	  }
	  
	  $horas = (3 * ($ronda - 1)) + (24 * $dias);
	}
	else {
	  $horas = 24 * ($ronda - 1);
	}
	$fecha = format_date(($torneo->Fecha_Inicio + (60 * 60 * $horas)), 'custom', 'Y-m-d H:i');
	
	$node = _torneo_save_match(PROGRAMADO, $torneo->id_Modalidad_Juego_Temporada, $fecha, $numero_rondas, $home_team['nid_Equipo'], $away_team['nid_Equipo']);
	
	//Agrega el match a la tabla de Torneos_Equipos para poder desplegarlo en la vista de Detalles de Torneo
	db_set_active('eSM');
	  db_query('INSERT INTO {Retos_Torneos} (nid_Torneo, nid_Reto, Ronda) VALUES (%d, %d, %d)', $nid_Torneo, $node->nid, $ronda);
	db_set_active('deafult');
  }
}
/**
 * Función para crear un nodo de tipo match de manera automática
 * @param
 * 	$status: 1 para publicar el partido, 0 para no publicarlo
 * 	$id_Modalidad_Juego_Temporada
 * 	$fecha: en formato de texto no timestamp
 * 	$numero_rondas
 * 	$home_team y $away_team nid de los equipos visitante y local
 *
 * @return
 * 	$node-> Objeto de tipo nodo con todos los datos del match
 */
function _torneo_save_match($status, $id_Modalidad_Juego_Temporada, $fecha, $numero_rondas, $home_team, $away_team) {
  $node = new StdClass();
  //Propiedades estándar de un nodo
  $node->uid = 1;
  $node->status = $status;
  $node->type = 'match';
  //Coments status
  //0 - disabled; 1 - read only; 2 - read/write
  $node->comment = 2;
  //Propiedades específicas del match
  $node->Estado = 1;					//Marca al nodo en estado de programado
  $node->id_Modalidad_Juego_Temporada = $id_Modalidad_Juego_Temporada;
  $node->Fecha = $fecha;
  $node->Numero_Rondas = $numero_rondas;
  $node->Tipo = 1;						//Marca al nodo como de tipo torneo		
  $node->home_team = $home_team;
  $node->away_team = $away_team;
  
  node_save($node);
  
  return $node;
}
/**
 * Función para crear los matches de un torneo
 */
function _torneo_create_matches($nid_Torneo, $numrounds, $bracketSize) {
  //Recorre todos los brackets para verificar que retos se pueden crear
  for ($round=1; $round < $numrounds; $round++) {
	for ($y=1 ; $y<=$bracketSize ; $y = $y + 2) {
	  $home_team = _torneo_get_bracket_info($nid_Torneo, $round, $y);
	  $away_team = _torneo_get_bracket_info($nid_Torneo, $round, ($y + 1));
	  
	  if(is_array($home_team) && ($home_team['nid_Equipo'] != 1)) {
		//Verifica si se puede crear un match para estos equipos
		_torneo_create_match($nid_Torneo, $home_team['nid_Equipo'], $round, $y);
	  }
	  elseif(is_array($away_team) && ($away_team['nid_Equipo'] != 1)) {
		//Verifica si se puede crear un match para estos equipos
		_torneo_create_match($nid_Torneo, $away_team['nid_Equipo'], $round, ($y + 1));
	  }
	}
  }
}